{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Python version of \" the most awesome validation engine for PHP \" Installation pip install respect-validation General information PHP and Python have many differences that why this library has some small changes, but an awesome architecture was migrated without changes. Complex rules made simple: v.numericVal().positive().between(1, 255).validate(some_variable) . Advanced reporting to show validation errors. More than 130 (fully tested) validation rules. Integration with Flask example. Why is it great alternative to others? It is easy to make logical check in one line. You can easily see logic in chain of rules . There are no addition classes, instances, dictionaries, there is only one chain of rules and it is beautiful. There are logical operators inside, you can use them as usual rules. You can easily set several validation chains and wrap them into logical rule like AnyOf or OneOf (only one chain valid) or AllOf or When (if ... then ... else) and so on. I hope you will find this interesting. Any rule or chain of rules you can easily revert to negative result with only one logical rule - Not . There are many of prebuilt rules. They will be useful for most of general cases. You can easily create you own package of rules and use it when it is needed. How to say thank you? If you like this library please add star for initial library \" the most awesome validation engine for PHP \". Many thanks to Alexandre Gomes Gaigalas for beautiful architecture.","title":"Overview"},{"location":"#overview","text":"","title":"Overview"},{"location":"#python-version-of-the-most-awesome-validation-engine-for-php","text":"","title":"Python version of \"the most awesome validation engine for PHP\""},{"location":"#installation","text":"pip install respect-validation","title":"Installation"},{"location":"#general-information","text":"PHP and Python have many differences that why this library has some small changes, but an awesome architecture was migrated without changes. Complex rules made simple: v.numericVal().positive().between(1, 255).validate(some_variable) . Advanced reporting to show validation errors. More than 130 (fully tested) validation rules. Integration with Flask example.","title":"General information"},{"location":"#why-is-it-great-alternative-to-others","text":"It is easy to make logical check in one line. You can easily see logic in chain of rules . There are no addition classes, instances, dictionaries, there is only one chain of rules and it is beautiful. There are logical operators inside, you can use them as usual rules. You can easily set several validation chains and wrap them into logical rule like AnyOf or OneOf (only one chain valid) or AllOf or When (if ... then ... else) and so on. I hope you will find this interesting. Any rule or chain of rules you can easily revert to negative result with only one logical rule - Not . There are many of prebuilt rules. They will be useful for most of general cases. You can easily create you own package of rules and use it when it is needed.","title":"Why is it great alternative to others?"},{"location":"#how-to-say-thank-you","text":"If you like this library please add star for initial library \" the most awesome validation engine for PHP \". Many thanks to Alexandre Gomes Gaigalas for beautiful architecture.","title":"How to say thank you?"},{"location":"best_pracrice/","text":"Best practice Many of available rule can switch between types and compare data of different types. If you know what type do you expect, then better to set this check. For example, we expect to get int , then we set intType check at the beginning of validation: v . intType () . between ( 1 , 100 ) . validate ( 10 ) # true v . intType () . between ( 1 , 100 ) . validate ( '10' ) # false If for some reason we want to have number in string type, there is no need to convert it to integer, just add addition validation: v . digit () . between ( 1 , 100 ) . validate ( '10' ) # true Many of rules can do type switch for you, please visit comparable values for more information. Best practice is to set validation as close as you can to your expectations for final data","title":"Best practice"},{"location":"best_pracrice/#best-practice","text":"Many of available rule can switch between types and compare data of different types. If you know what type do you expect, then better to set this check. For example, we expect to get int , then we set intType check at the beginning of validation: v . intType () . between ( 1 , 100 ) . validate ( 10 ) # true v . intType () . between ( 1 , 100 ) . validate ( '10' ) # false If for some reason we want to have number in string type, there is no need to convert it to integer, just add addition validation: v . digit () . between ( 1 , 100 ) . validate ( '10' ) # true Many of rules can do type switch for you, please visit comparable values for more information. Best practice is to set validation as close as you can to your expectations for final data","title":"Best practice"},{"location":"comparable-values/","text":"Comparable values For certain types you can't make comparisons out of the box in Python but Validation brings support to a few of them. You can make comparison with the following data types: Countable: any object that has attribute __len__ datetime objects String which can be converted to datetime based on ISO format Integer types ( int , float , bool ) Single character string If string is digit, then it will be treated as integer String with more than one character comparable by length Below you can see some examples: # int compare with range v . Min ( 100 ) . validate ( range ( 101 )) # true if it has at least 100 items # datetime support yesterday = datetime . today () - timedelta ( days = 1 ) tomorrow = datetime . today () + timedelta ( days = 1 ) now = datetime . today () v . dateTime () \\ . between ( yesterday , tomorrow ) \\ . validate ( now ) # true # int compatible with str v . digit () . Max ( 10 ) . validate ( '5' ) # true v . stringVal () . between ( 'a' , 'f' ) . validate ( 'd' ) # true v . dateTime () . between ( '2022-04-01' , '2022-04-15' ) . validate ( '2022-04-07 10:12:11' ) # true","title":"Comparable values"},{"location":"comparable-values/#comparable-values","text":"For certain types you can't make comparisons out of the box in Python but Validation brings support to a few of them. You can make comparison with the following data types: Countable: any object that has attribute __len__ datetime objects String which can be converted to datetime based on ISO format Integer types ( int , float , bool ) Single character string If string is digit, then it will be treated as integer String with more than one character comparable by length Below you can see some examples: # int compare with range v . Min ( 100 ) . validate ( range ( 101 )) # true if it has at least 100 items # datetime support yesterday = datetime . today () - timedelta ( days = 1 ) tomorrow = datetime . today () + timedelta ( days = 1 ) now = datetime . today () v . dateTime () \\ . between ( yesterday , tomorrow ) \\ . validate ( now ) # true # int compatible with str v . digit () . Max ( 10 ) . validate ( '5' ) # true v . stringVal () . between ( 'a' , 'f' ) . validate ( 'd' ) # true v . dateTime () . between ( '2022-04-01' , '2022-04-15' ) . validate ( '2022-04-07 10:12:11' ) # true","title":"Comparable values"},{"location":"custom-rules/","text":"Custom rules You can also create and use your own rules. To do this, you will need to create a rule and an exception to go with the rule. To create a rule, you need to create a class that inherits the AbstractRule class and add package with rule module to Factory . When the rule is called the logic inside the validate method will be executed. Here's how the class should look: from respect_validation.Rules.AbstractRule import AbstractRule class CustomRule ( AbstractRule ): def validate ( self , input_val ) -> bool : return input_val == 'Hello custom rule!' IMPORTANT. Names of module and class of rule must be the same (for example, the name of module CustomRule.py, then the name of class is CustomRule). Name are case-sensitive and must start with upper letter ( C ustomRule - \u2705 , c ustomRule - \u274c ). Each rule must have an Exception to go with it. Exceptions should be named with the name of the rule followed by the word Exception. The process of creating an Exception is similar to creating a rule but there are no methods in the Exception class. Instead, you create one static property that includes an array with the information below: from respect_validation.Exceptions import ValidationException class CustomRuleException ( ValidationException ): _default_templates = { 'default' : { 'standard' : 'Validation message if Something fails validation.' }, 'negative' : { 'standard' : 'Validation message if the negative of Something is called and fails validation.' } } So in the end, the folder structure for your Rules and Exceptions should look something like the structure below. If you understand how it works, then you can use your own structure \ud83d\ude0e. Custom \u2502-- __init__.py \u2502 \u2502-- Rules \u2502 \u2502-- __init__.py \u2502 \u2502-- CustomRule.py \u2502 \u2502-- CustomRule1.py \u2502 \u2502-- CustomRule2.py \u2502 \u2502-- CustomRule3.py \u2502 `-- ... `-- Exceptions \u2502-- __init__.py \u2502-- CustomRuleException.py \u2502-- CustomRule1Exception.py \u2502-- CustomRule2Exception.py \u2502-- CustomRule3Exception.py `-- ... All classes in Validation are creating by the Factory class. If you want Validation to execute your rule (or rules) in the chain, you must add path (paths) of your packages to the default Factory . from respect_validation import Validator as v from respect_validation.Factory import Factory Factory . add_rules_packages ( 'Custom.Rules' ) Factory . add_exceptions_packages ( 'Custom.Exceptions' ) v . customRule () . validate ( 'Hello custom rule!' ) Add arguments (attributes/parameters) to custom rule To add arguments to custom rule please use next example: from respect_validation.Rules.AbstractRule import AbstractRule class CustomRule ( AbstractRule ): _class_parameter : bool = False def __init__ ( self , new_argument : bool ): super () . __init__ () self . _class_parameter = new_argument def validate ( self , input_val ) -> bool : if self . _class_parameter : return input_val == 'Hello custom rule!' else : False IMPORTANT . Don't forget to add super().__init__() , else you may have problems. Now you can write rule in this way: v . customRule ( new_argument = True ) . validate ( 'Hello custom rule!' ) Add parameters for exception messages You can set parameters in rule class and then use these parameters in exception message. By default, all rules has parameter name and for custom rule it will be equals to input value. For example, we set parameter my_name in the rule below: from respect_validation.Rules.AbstractRule import AbstractRule class CustomRule ( AbstractRule ): def validate ( self , input_val ) -> bool : my_name = 'Alexey Mochalin' # please use method below to set parameter: self . set_param ( 'my_name' , my_name ) return input_val == 'Hello World!' We use this parameter in exception message: from respect_validation.Exceptions import ValidationException class CustomRuleException ( ValidationException ): _default_templates = { 'default' : { 'standard' : 'Rule checked {name} and {my_name} thinks it should be equal to \"Hello World!\"' }, 'negative' : { 'standard' : 'Rule checked {name} and {my_name} thinks it should NOT be equal to \"Hello World!\"' } } Now we can try what we have created: from respect_validation.Factory import Factory from respect_validation import Validator as v from Custom.Exceptions.CustomRuleException import CustomRuleException Factory . add_rules_packages ( 'Custom.Rules' ) Factory . add_exceptions_packages ( 'Custom.Exceptions' ) try : v . customRule () . check ( 'Hello custom rule!' ) except CustomRuleException as cre : print ( cre . get_message ()) print ( \" \\n And for negative case: \\n \" ) try : v . Not ( v . customRule ()) . check ( 'Hello World!' ) except CustomRuleException as cre : print ( cre . get_message ()) Here is the output: Rule checked \"Hello custom rule!\" and Alexey Mochalin thinks it should be equal to \"Hello World!\" And for negative case: Rule checked \"Hello World!\" and Alexey Mochalin thinks it should NOT be equal to \"Hello World!\"","title":"Custom rules"},{"location":"custom-rules/#custom-rules","text":"You can also create and use your own rules. To do this, you will need to create a rule and an exception to go with the rule. To create a rule, you need to create a class that inherits the AbstractRule class and add package with rule module to Factory . When the rule is called the logic inside the validate method will be executed. Here's how the class should look: from respect_validation.Rules.AbstractRule import AbstractRule class CustomRule ( AbstractRule ): def validate ( self , input_val ) -> bool : return input_val == 'Hello custom rule!' IMPORTANT. Names of module and class of rule must be the same (for example, the name of module CustomRule.py, then the name of class is CustomRule). Name are case-sensitive and must start with upper letter ( C ustomRule - \u2705 , c ustomRule - \u274c ). Each rule must have an Exception to go with it. Exceptions should be named with the name of the rule followed by the word Exception. The process of creating an Exception is similar to creating a rule but there are no methods in the Exception class. Instead, you create one static property that includes an array with the information below: from respect_validation.Exceptions import ValidationException class CustomRuleException ( ValidationException ): _default_templates = { 'default' : { 'standard' : 'Validation message if Something fails validation.' }, 'negative' : { 'standard' : 'Validation message if the negative of Something is called and fails validation.' } } So in the end, the folder structure for your Rules and Exceptions should look something like the structure below. If you understand how it works, then you can use your own structure \ud83d\ude0e. Custom \u2502-- __init__.py \u2502 \u2502-- Rules \u2502 \u2502-- __init__.py \u2502 \u2502-- CustomRule.py \u2502 \u2502-- CustomRule1.py \u2502 \u2502-- CustomRule2.py \u2502 \u2502-- CustomRule3.py \u2502 `-- ... `-- Exceptions \u2502-- __init__.py \u2502-- CustomRuleException.py \u2502-- CustomRule1Exception.py \u2502-- CustomRule2Exception.py \u2502-- CustomRule3Exception.py `-- ... All classes in Validation are creating by the Factory class. If you want Validation to execute your rule (or rules) in the chain, you must add path (paths) of your packages to the default Factory . from respect_validation import Validator as v from respect_validation.Factory import Factory Factory . add_rules_packages ( 'Custom.Rules' ) Factory . add_exceptions_packages ( 'Custom.Exceptions' ) v . customRule () . validate ( 'Hello custom rule!' )","title":"Custom rules"},{"location":"custom-rules/#add-arguments-attributesparameters-to-custom-rule","text":"To add arguments to custom rule please use next example: from respect_validation.Rules.AbstractRule import AbstractRule class CustomRule ( AbstractRule ): _class_parameter : bool = False def __init__ ( self , new_argument : bool ): super () . __init__ () self . _class_parameter = new_argument def validate ( self , input_val ) -> bool : if self . _class_parameter : return input_val == 'Hello custom rule!' else : False IMPORTANT . Don't forget to add super().__init__() , else you may have problems. Now you can write rule in this way: v . customRule ( new_argument = True ) . validate ( 'Hello custom rule!' )","title":"Add arguments (attributes/parameters) to custom rule"},{"location":"custom-rules/#add-parameters-for-exception-messages","text":"You can set parameters in rule class and then use these parameters in exception message. By default, all rules has parameter name and for custom rule it will be equals to input value. For example, we set parameter my_name in the rule below: from respect_validation.Rules.AbstractRule import AbstractRule class CustomRule ( AbstractRule ): def validate ( self , input_val ) -> bool : my_name = 'Alexey Mochalin' # please use method below to set parameter: self . set_param ( 'my_name' , my_name ) return input_val == 'Hello World!' We use this parameter in exception message: from respect_validation.Exceptions import ValidationException class CustomRuleException ( ValidationException ): _default_templates = { 'default' : { 'standard' : 'Rule checked {name} and {my_name} thinks it should be equal to \"Hello World!\"' }, 'negative' : { 'standard' : 'Rule checked {name} and {my_name} thinks it should NOT be equal to \"Hello World!\"' } } Now we can try what we have created: from respect_validation.Factory import Factory from respect_validation import Validator as v from Custom.Exceptions.CustomRuleException import CustomRuleException Factory . add_rules_packages ( 'Custom.Rules' ) Factory . add_exceptions_packages ( 'Custom.Exceptions' ) try : v . customRule () . check ( 'Hello custom rule!' ) except CustomRuleException as cre : print ( cre . get_message ()) print ( \" \\n And for negative case: \\n \" ) try : v . Not ( v . customRule ()) . check ( 'Hello World!' ) except CustomRuleException as cre : print ( cre . get_message ()) Here is the output: Rule checked \"Hello custom rule!\" and Alexey Mochalin thinks it should be equal to \"Hello World!\" And for negative case: Rule checked \"Hello World!\" and Alexey Mochalin thinks it should NOT be equal to \"Hello World!\"","title":"Add parameters for exception messages"},{"location":"feature-guide/","text":"Feature Guide import respect_validation In most cases you need only Validator. It will be handy to import it just like one letter \"v\": from respect_validation import Validator as v Simple validation The Hello World validator is something like this: number = 123 v . numericVal () . validate ( number ) # true Chained validation It is possible to use validators in a chain. Sample below validates a string containing numbers and letters, no whitespace and length between 1 and 15. username_validator = v . alnum () . noWhitespace () . length ( 1 , 15 ) username_validator . validate ( 'alganet' ) # true Validating object attributes Given this simple object: class User ( object ): pass user = User () user . name = 'Alexandre' user . birthdate = datetime ( '1987-07-01' , '%Y-%m- %d ' ) Is possible to validate its attributes in a single chain: # \"name\" in between 1 to 32 symbols # \"birthdate\" older than 18 years old user_validator = v . attribute ( 'name' , v . stringType () . length ( 1 , 32 )) . \\ attribute ( 'birthdate' , v . date () . Max ( datetime ( datetime . now () . year - 18 , datetime . now () . month , datetime . now () . day ))) user_validator . validate ( user ) # true Validating dictionary is also possible using v.key() Note that we used v.stringType() and v.date() in the beginning of the validator. Although is not mandatory, it is a good practice to use the type of the validated object as the first node in the chain. Validating dictionaries Validating dict into another dict is also possible using Key . If we got the dict below: data = { 'parentKey' : { 'field1' : 'value1' , 'field2' : 'value2' , 'field3' : True , } } Using the next combination of rules, we can validate child keys. v . key ( 'parentKey' , v . key ( 'field1' , v . stringType ()) . \\ key ( 'field2' , v . stringType ()) . \\ key ( 'field3' , v . boolType ()) ) \\ . claim ( data ) # You can also use check() or validate() Input optional If you want to treat a value as optional you can use v.optional() rule: v . alpha () . validate ( '' ) # false input required v . alpha () . validate ( None ) # false input required v . optional ( v . alpha ()) . validate ( '' ) # true v . optional ( v . alpha ()) . validate ( None ) # true By optional we consider None or an empty string ( '' ). See more on Optional . Negating rules You can use the v.Not() (IMPORTANT to type with upper N) to negate any rule: v . Not ( v . intVal ()) . validate ( 10 ) # false, input must not be integer Validator reuse Once created, you can reuse your validator anywhere. Remember username_validator ? username_validator . validate ( 'respect' ); // true username_validator . validate ( 'alexandre gaigalas' ); // false username_validator . validate ( '#$%' ); // false Exception types Exception : All exceptions implement this interface; ValidationException : Implements the Exception interface Raise when the check() fails All validation exceptions extend this class Available methods: get_message() ; update_mode(mode) ; update_template(template) ; NestedValidationException : Extends the ValidationException class Usually thrown when the claim() fails Available methods: get_full_message() ; get_messages() ; Informative exceptions When something goes wrong, Validation can tell you exactly what's going on. For this, we use the claim() method instead of validate() : from respect_validation.Exceptions import NestedValidationException try : username_validator . claim ( 'really messed up screen#name' ); except NestedValidationException as exception : print ( exception . get_full_message ()) The printed message is exactly this, as a nested Markdown list: - All of the required rules must pass for \"really messed up screen#name\" - \"really messed up screen#name\" must contain only letters (a-z) and digits (0-9) - \"really messed up screen#name\" must not contain whitespace - \"really messed up screen#name\" must have a length between 1 and 15 Getting all messages as a dict If you want to get all the messages as a dict you can use get_messages() for that. The get_messages() method returns an array with all the messages. try : username_validator . claim ( 'really messed up screen#name' ); except NestedValidationException as exception : print ( exception . get_messages ()) The get_messages() returns an array in which the keys are the name of the validators, or its reference in case you are using Key or Attribute rule: { 'alnum': ['\"really messed up screen#name\" must contain only letters (a-z) and digits (0-9)'], 'noWhitespace': ['\"really messed up screen#name\" must not contain whitespace'], 'length': ['\"really messed up screen#name\" must have a length between 1 and 15'] } Custom messages Getting messages as a dict is fine, but sometimes you need to customize them in order to present them to the user. This is possible using the get_messages() method as well by passing the templates as an argument: try : username_validator . claim ( 'really messed up screen#name' ) except NestedValidationException as exception : print ( exception . get_messages ({ 'alnum' : '{{name}} must contain only letters and digits' , 'noWhitespace' : '{{name}} cannot contain spaces' , 'length' : '{{name}} must not have more than 15 chars' , }) ) For all messages, the {{name}} variable is available for templates. If you do not define a name it uses the input to replace this placeholder. The result of the code above will be: { 'alnum': ['{name} must contain only letters and digits'], 'noWhitespace': ['{name} cannot contain spaces'], 'length': ['{name} must not have more than 15 chars'] } Note that get_message() will only return a message when the specific validation in the chain fails. Validator name On v.attribute() and v.key() , {{name}} is the attribute/key name. For others, is the same as the input. You can customize a validator name using: v . dateTime ( '%Y-%m- %d ' ) . between ( '1980-02-02' , '2022-04-29' ) . setName ( 'Member Since' ); Validation methods We've seen validate() that returns true or false and claim() that throws a complete validation report. There is also a check() method that returns an Exception only with the first error found: from respect_validation.Exceptions import ValidationException try : username_validator . check ( 'really messed up screen#name' ) except ValidationException as exception : print ( exception . get_message ()) Message: \"really messed up screen#name\" must contain only letters (a-z) and digits (0-9)","title":"Feature Guide"},{"location":"feature-guide/#feature-guide","text":"","title":"Feature Guide"},{"location":"feature-guide/#import-respect_validation","text":"In most cases you need only Validator. It will be handy to import it just like one letter \"v\": from respect_validation import Validator as v","title":"import respect_validation"},{"location":"feature-guide/#simple-validation","text":"The Hello World validator is something like this: number = 123 v . numericVal () . validate ( number ) # true","title":"Simple validation"},{"location":"feature-guide/#chained-validation","text":"It is possible to use validators in a chain. Sample below validates a string containing numbers and letters, no whitespace and length between 1 and 15. username_validator = v . alnum () . noWhitespace () . length ( 1 , 15 ) username_validator . validate ( 'alganet' ) # true","title":"Chained validation"},{"location":"feature-guide/#validating-object-attributes","text":"Given this simple object: class User ( object ): pass user = User () user . name = 'Alexandre' user . birthdate = datetime ( '1987-07-01' , '%Y-%m- %d ' ) Is possible to validate its attributes in a single chain: # \"name\" in between 1 to 32 symbols # \"birthdate\" older than 18 years old user_validator = v . attribute ( 'name' , v . stringType () . length ( 1 , 32 )) . \\ attribute ( 'birthdate' , v . date () . Max ( datetime ( datetime . now () . year - 18 , datetime . now () . month , datetime . now () . day ))) user_validator . validate ( user ) # true Validating dictionary is also possible using v.key() Note that we used v.stringType() and v.date() in the beginning of the validator. Although is not mandatory, it is a good practice to use the type of the validated object as the first node in the chain.","title":"Validating object attributes"},{"location":"feature-guide/#validating-dictionaries","text":"Validating dict into another dict is also possible using Key . If we got the dict below: data = { 'parentKey' : { 'field1' : 'value1' , 'field2' : 'value2' , 'field3' : True , } } Using the next combination of rules, we can validate child keys. v . key ( 'parentKey' , v . key ( 'field1' , v . stringType ()) . \\ key ( 'field2' , v . stringType ()) . \\ key ( 'field3' , v . boolType ()) ) \\ . claim ( data ) # You can also use check() or validate()","title":"Validating dictionaries"},{"location":"feature-guide/#input-optional","text":"If you want to treat a value as optional you can use v.optional() rule: v . alpha () . validate ( '' ) # false input required v . alpha () . validate ( None ) # false input required v . optional ( v . alpha ()) . validate ( '' ) # true v . optional ( v . alpha ()) . validate ( None ) # true By optional we consider None or an empty string ( '' ). See more on Optional .","title":"Input optional"},{"location":"feature-guide/#negating-rules","text":"You can use the v.Not() (IMPORTANT to type with upper N) to negate any rule: v . Not ( v . intVal ()) . validate ( 10 ) # false, input must not be integer","title":"Negating rules"},{"location":"feature-guide/#validator-reuse","text":"Once created, you can reuse your validator anywhere. Remember username_validator ? username_validator . validate ( 'respect' ); // true username_validator . validate ( 'alexandre gaigalas' ); // false username_validator . validate ( '#$%' ); // false","title":"Validator reuse"},{"location":"feature-guide/#exception-types","text":"Exception : All exceptions implement this interface; ValidationException : Implements the Exception interface Raise when the check() fails All validation exceptions extend this class Available methods: get_message() ; update_mode(mode) ; update_template(template) ; NestedValidationException : Extends the ValidationException class Usually thrown when the claim() fails Available methods: get_full_message() ; get_messages() ;","title":"Exception types"},{"location":"feature-guide/#informative-exceptions","text":"When something goes wrong, Validation can tell you exactly what's going on. For this, we use the claim() method instead of validate() : from respect_validation.Exceptions import NestedValidationException try : username_validator . claim ( 'really messed up screen#name' ); except NestedValidationException as exception : print ( exception . get_full_message ()) The printed message is exactly this, as a nested Markdown list: - All of the required rules must pass for \"really messed up screen#name\" - \"really messed up screen#name\" must contain only letters (a-z) and digits (0-9) - \"really messed up screen#name\" must not contain whitespace - \"really messed up screen#name\" must have a length between 1 and 15","title":"Informative exceptions"},{"location":"feature-guide/#getting-all-messages-as-a-dict","text":"If you want to get all the messages as a dict you can use get_messages() for that. The get_messages() method returns an array with all the messages. try : username_validator . claim ( 'really messed up screen#name' ); except NestedValidationException as exception : print ( exception . get_messages ()) The get_messages() returns an array in which the keys are the name of the validators, or its reference in case you are using Key or Attribute rule: { 'alnum': ['\"really messed up screen#name\" must contain only letters (a-z) and digits (0-9)'], 'noWhitespace': ['\"really messed up screen#name\" must not contain whitespace'], 'length': ['\"really messed up screen#name\" must have a length between 1 and 15'] }","title":"Getting all messages as a dict"},{"location":"feature-guide/#custom-messages","text":"Getting messages as a dict is fine, but sometimes you need to customize them in order to present them to the user. This is possible using the get_messages() method as well by passing the templates as an argument: try : username_validator . claim ( 'really messed up screen#name' ) except NestedValidationException as exception : print ( exception . get_messages ({ 'alnum' : '{{name}} must contain only letters and digits' , 'noWhitespace' : '{{name}} cannot contain spaces' , 'length' : '{{name}} must not have more than 15 chars' , }) ) For all messages, the {{name}} variable is available for templates. If you do not define a name it uses the input to replace this placeholder. The result of the code above will be: { 'alnum': ['{name} must contain only letters and digits'], 'noWhitespace': ['{name} cannot contain spaces'], 'length': ['{name} must not have more than 15 chars'] } Note that get_message() will only return a message when the specific validation in the chain fails.","title":"Custom messages"},{"location":"feature-guide/#validator-name","text":"On v.attribute() and v.key() , {{name}} is the attribute/key name. For others, is the same as the input. You can customize a validator name using: v . dateTime ( '%Y-%m- %d ' ) . between ( '1980-02-02' , '2022-04-29' ) . setName ( 'Member Since' );","title":"Validator name"},{"location":"feature-guide/#validation-methods","text":"We've seen validate() that returns true or false and claim() that throws a complete validation report. There is also a check() method that returns an Exception only with the first error found: from respect_validation.Exceptions import ValidationException try : username_validator . check ( 'really messed up screen#name' ) except ValidationException as exception : print ( exception . get_message ()) Message: \"really messed up screen#name\" must contain only letters (a-z) and digits (0-9)","title":"Validation methods"},{"location":"license/","text":"Copyright (c) Alexey Mochalin amochalini@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"list-of-rules/","text":"List of rules Arrays Contains ContainsAny DictType Each EndsWith Include Key KeySet KeyValue StartsWith Subset Unique Banking CreditCard Iban Booleans AlwaysInvalid AlwaysValid BoolType BoolVal FalseVal No TrueVal Yes Callables Call CallableType Callback Comparisons Between Equals Equivalent GreaterThan Identical Include LessThan Max Min Composite AllOf AnyOf NoneOf OneOf Conditions Not When Date and Time Date DateTime LeapDate LeapYear Time File system Directory Executable Exists Extension File Image Mimetype Readable Size SymbolicLink Writable ISO codes CountryCode CurrencyCode LanguageCode Identifications Bsn Cnh Cnpj Cpf Imei Isbn Luhn MacAddress Nip Pesel Pis PolishIdCard Internet Domain Email Ip Tld Url VideoUrl Lists DictType ListType Localization CountryCode CurrencyCode LanguageCode PostalCode Math Factor Fibonacci Finite Infinite Multiple Negative PerfectSquare Positive PrimeNumber Miscellaneous NotBlank NotEmpty NotOptional Nesting AllOf AnyOf Attribute Call Each Key KeySet KeyValue NoneOf Not Nullable OneOf Optional When Numbers BaseNum Decimal Digit Even Factor Fibonacci Finite FloatType FloatVal Infinite IntType IntVal Multiple Negative Number NumericVal Odd PerfectSquare Positive PrimeNumber Roman Objects Attribute Instance Strings Alnum Alpha Base64 Charset Consonant Contains ContainsAny Control Digit EndsWith HexRgbColor Include Json Lowercase NoWhitespace Phone PostalCode Printable Punct Regex Slug Space StartsWith StringType StringVal Uppercase Uuid Version Vowel Structures Attribute Key KeySet Types BoolType BoolVal BytearrayType BytesType CallableType Countable DictType FloatType FloatVal IntType IntVal Iterable ListType NoneType NumericVal StringType StringVal Type","title":"List of rules"},{"location":"list-of-rules/#list-of-rules","text":"","title":"List of rules"},{"location":"list-of-rules/#arrays","text":"Contains ContainsAny DictType Each EndsWith Include Key KeySet KeyValue StartsWith Subset Unique","title":"Arrays"},{"location":"list-of-rules/#banking","text":"CreditCard Iban","title":"Banking"},{"location":"list-of-rules/#booleans","text":"AlwaysInvalid AlwaysValid BoolType BoolVal FalseVal No TrueVal Yes","title":"Booleans"},{"location":"list-of-rules/#callables","text":"Call CallableType Callback","title":"Callables"},{"location":"list-of-rules/#comparisons","text":"Between Equals Equivalent GreaterThan Identical Include LessThan Max Min","title":"Comparisons"},{"location":"list-of-rules/#composite","text":"AllOf AnyOf NoneOf OneOf","title":"Composite"},{"location":"list-of-rules/#conditions","text":"Not When","title":"Conditions"},{"location":"list-of-rules/#date-and-time","text":"Date DateTime LeapDate LeapYear Time","title":"Date and Time"},{"location":"list-of-rules/#file-system","text":"Directory Executable Exists Extension File Image Mimetype Readable Size SymbolicLink Writable","title":"File system"},{"location":"list-of-rules/#iso-codes","text":"CountryCode CurrencyCode LanguageCode","title":"ISO codes"},{"location":"list-of-rules/#identifications","text":"Bsn Cnh Cnpj Cpf Imei Isbn Luhn MacAddress Nip Pesel Pis PolishIdCard","title":"Identifications"},{"location":"list-of-rules/#internet","text":"Domain Email Ip Tld Url VideoUrl","title":"Internet"},{"location":"list-of-rules/#lists","text":"DictType ListType","title":"Lists"},{"location":"list-of-rules/#localization","text":"CountryCode CurrencyCode LanguageCode PostalCode","title":"Localization"},{"location":"list-of-rules/#math","text":"Factor Fibonacci Finite Infinite Multiple Negative PerfectSquare Positive PrimeNumber","title":"Math"},{"location":"list-of-rules/#miscellaneous","text":"NotBlank NotEmpty NotOptional","title":"Miscellaneous"},{"location":"list-of-rules/#nesting","text":"AllOf AnyOf Attribute Call Each Key KeySet KeyValue NoneOf Not Nullable OneOf Optional When","title":"Nesting"},{"location":"list-of-rules/#numbers","text":"BaseNum Decimal Digit Even Factor Fibonacci Finite FloatType FloatVal Infinite IntType IntVal Multiple Negative Number NumericVal Odd PerfectSquare Positive PrimeNumber Roman","title":"Numbers"},{"location":"list-of-rules/#objects","text":"Attribute Instance","title":"Objects"},{"location":"list-of-rules/#strings","text":"Alnum Alpha Base64 Charset Consonant Contains ContainsAny Control Digit EndsWith HexRgbColor Include Json Lowercase NoWhitespace Phone PostalCode Printable Punct Regex Slug Space StartsWith StringType StringVal Uppercase Uuid Version Vowel","title":"Strings"},{"location":"list-of-rules/#structures","text":"Attribute Key KeySet","title":"Structures"},{"location":"list-of-rules/#types","text":"BoolType BoolVal BytearrayType BytesType CallableType Countable DictType FloatType FloatVal IntType IntVal Iterable ListType NoneType NumericVal StringType StringVal Type","title":"Types"},{"location":"flask%20integration/1_custom_validator/","text":"Custom Validator Is it legal? It can sound wired - custom validator for respect validation, but it is something like helper for integration with flask. Let's look. New class Validator Below you can find new Validation class and description. I will use with class for integration with flask. from respect_validation.Exceptions import NestedValidationException class Validator : _errors : list = [] _error_messages : dict = {} def validate ( self , request : dict , rules : dict , check_unknown : bool = False , templates : dict = {}) -> 'Validator' : self . _errors = [] self . _error_messages = {} received_fields = list ( request . keys ()) if check_unknown : self . _error_messages [ \"_unknown_\" ] = [] for field , rule in rules . items (): self . _error_messages [ field ] = None item = request . get ( field , None ) try : if rule . get_name () is None : rule . set_name ( field [ 0 ] . upper () + field [ 1 :]) rule . claim ( item ) except NestedValidationException as nve : self . _errors . append ( nve . get_messages ( templates )) self . _error_messages [ field ] = nve . get_messages ( templates ) if field in received_fields : received_fields . remove ( field ) if check_unknown and len ( received_fields ): for f in received_fields : self . _error_messages [ \"_unknown_\" ] . append ( \"Unknown field {} \" . format ( f )) self . _errors . append ( \"Unknown field {} \" . format ( f )) return self def failed ( self ) -> bool : return len ( self . _errors ) > 0 def get_messages ( self ) -> dict : return self . _error_messages This class has 3 methods: validate , custom validation logic (more info below) failed , just to check if we have errors after validation get_messages , get messages which were collected after validation The main method as you can see is validate , it has several arguments: request - input data. In examples with flask integration it will be json converted to dict rules - it is a dict where keys of this dict should match with keys of request check_unknown - when True, validate checks if count of keys in request different and more than keys in rules . In case of truth, it will add additional parameter to error messages _unknown_ . templates - you can find more information here Let's pass the input through \"grinder\" I think example can clarify many things. First we need an input data - the data which should be validated: user_data = { \"username\" : \"\" , \"email\" : \"\" , \"personal_id\" : \"\" , \"password\" : \"\" , } Next we have to define rules for expected input: from respect_validation import Validator as v rules = { \"username\" : v . stringType () . alnum () . noWhitespace () . length ( 4 , 64 ), \"email\" : v . optional ( v . email ()), \"password\" : v . stringType () . length ( 8 , 64 ) } If you need any explanation for any of rules above, please try to find it here . Let's put our data to Validator: from Validator import Validator validator = Validator () validation = validator . validate ( user_data , rules , check_unknown = True ) print ( validation . get_messages ()) We got this output: { \"_unknown_\" : [ \"Unknown field personal_id\" ], \"username\" : { \"alnum\" : [ \"Username must contain only letters (a-z) and digits (0-9)\" ], \"length\" : [ \"Username must have a length between 4 and 64\" ] }, \"email\" : null , \"password\" : { \"length\" : [ \"Password must have a length between 8 and 64\" ] } } The output above can clearly describe to user which field is incorrect and in our case also show extra field which unexpectedly appeared. Now we can go to integration with simple flask app .","title":"Custom Validator"},{"location":"flask%20integration/1_custom_validator/#custom-validator","text":"","title":"Custom Validator"},{"location":"flask%20integration/1_custom_validator/#is-it-legal","text":"It can sound wired - custom validator for respect validation, but it is something like helper for integration with flask. Let's look.","title":"Is it legal?"},{"location":"flask%20integration/1_custom_validator/#new-class-validator","text":"Below you can find new Validation class and description. I will use with class for integration with flask. from respect_validation.Exceptions import NestedValidationException class Validator : _errors : list = [] _error_messages : dict = {} def validate ( self , request : dict , rules : dict , check_unknown : bool = False , templates : dict = {}) -> 'Validator' : self . _errors = [] self . _error_messages = {} received_fields = list ( request . keys ()) if check_unknown : self . _error_messages [ \"_unknown_\" ] = [] for field , rule in rules . items (): self . _error_messages [ field ] = None item = request . get ( field , None ) try : if rule . get_name () is None : rule . set_name ( field [ 0 ] . upper () + field [ 1 :]) rule . claim ( item ) except NestedValidationException as nve : self . _errors . append ( nve . get_messages ( templates )) self . _error_messages [ field ] = nve . get_messages ( templates ) if field in received_fields : received_fields . remove ( field ) if check_unknown and len ( received_fields ): for f in received_fields : self . _error_messages [ \"_unknown_\" ] . append ( \"Unknown field {} \" . format ( f )) self . _errors . append ( \"Unknown field {} \" . format ( f )) return self def failed ( self ) -> bool : return len ( self . _errors ) > 0 def get_messages ( self ) -> dict : return self . _error_messages This class has 3 methods: validate , custom validation logic (more info below) failed , just to check if we have errors after validation get_messages , get messages which were collected after validation The main method as you can see is validate , it has several arguments: request - input data. In examples with flask integration it will be json converted to dict rules - it is a dict where keys of this dict should match with keys of request check_unknown - when True, validate checks if count of keys in request different and more than keys in rules . In case of truth, it will add additional parameter to error messages _unknown_ . templates - you can find more information here","title":"New class Validator"},{"location":"flask%20integration/1_custom_validator/#lets-pass-the-input-through-grinder","text":"I think example can clarify many things. First we need an input data - the data which should be validated: user_data = { \"username\" : \"\" , \"email\" : \"\" , \"personal_id\" : \"\" , \"password\" : \"\" , } Next we have to define rules for expected input: from respect_validation import Validator as v rules = { \"username\" : v . stringType () . alnum () . noWhitespace () . length ( 4 , 64 ), \"email\" : v . optional ( v . email ()), \"password\" : v . stringType () . length ( 8 , 64 ) } If you need any explanation for any of rules above, please try to find it here . Let's put our data to Validator: from Validator import Validator validator = Validator () validation = validator . validate ( user_data , rules , check_unknown = True ) print ( validation . get_messages ()) We got this output: { \"_unknown_\" : [ \"Unknown field personal_id\" ], \"username\" : { \"alnum\" : [ \"Username must contain only letters (a-z) and digits (0-9)\" ], \"length\" : [ \"Username must have a length between 4 and 64\" ] }, \"email\" : null , \"password\" : { \"length\" : [ \"Password must have a length between 8 and 64\" ] } } The output above can clearly describe to user which field is incorrect and in our case also show extra field which unexpectedly appeared. Now we can go to integration with simple flask app .","title":"Let's pass the input through \"grinder\""},{"location":"flask%20integration/2_simple_flask/","text":"Simple Flask APP First read previous page because here we will use new class Validator. Prepare Flask APP Let's start with example of simple Flask APP and integrated validator: from flask import Flask , request from respect_validation import Validator as v from Validator import Validator app = Flask ( __name__ ) validator = Validator () @app . route ( \"/test\" , methods = [ 'POST' ]) def validation_test (): r = request . json output = { \"error\" : False , \"validation\" : None , \"data\" : None } validation = validator . validate ( r , { \"username\" : v . stringType () . alnum () . noWhitespace () . length ( 4 , 64 ), \"email\" : v . optional ( v . email ()), \"first_name\" : v . optional ( v . stringType () . length ( 3 , 64 )) . set_name ( 'First name' ), \"second_name\" : v . optional ( v . stringType () . length ( 3 , 64 )) . set_name ( 'Second name' ), \"password\" : v . stringType () . length ( 8 , 64 ), \"password_confirmation\" : v . stringType () . equals ( r . get ( 'password' , None )) . set_template ( 'Password confirmation' ), }, templates = { 'equals' : \"Password confirmation does match with Password\" }, check_unknown = True ) if validation . failed (): output [ 'error' ] = True output [ 'validation' ] = validation . get_messages () return output output [ \"data\" ] = \"User data is correct :)\" return output if __name__ == '__main__' : app . run ( port = 5959 , host = '0.0.0.0' , debug = True ) We imported respect_validation.Validator to write our validation rules and new class Validator to run validation. Example request/response For example, we send this request: { \"username\" : \"A\" , \"email\" : \"B\" , \"first_name\" : \"Alexey\" , \"second_name\" : \"\" , \"personal_id\" : \"\" , \"password\" : \"123\" , \"password_confirmation\" : \"321\" } Flask will responses us with this JSON: { \"data\" : null , \"error\" : true , \"validation\" : { \"_unknown_\" : [ \"Unknown field personal_id\" ], \"email\" : { \"allOf\" : [ \"All of the required rules must pass for Email\" , { \"email\" : [ \"Email must be valid email\" ] } ] }, \"first_name\" : null , \"password\" : { \"length\" : [ \"Password must have a length between 8 and 64\" ] }, \"password_confirmation\" : { \"equals\" : [ \"Password confirmation does match with Password\" ] }, \"second_name\" : null , \"username\" : { \"length\" : [ \"Username must have a length between 4 and 64\" ] } } } With some skill of JavaScript this output can turn into clear error messages for a user in web interface, but it is beyond of this guide :) Hope you will find this useful. If you want another example of using flask, sqlalchemy and respect_validation, please follow next page.","title":"Simple Flask APP"},{"location":"flask%20integration/2_simple_flask/#simple-flask-app","text":"First read previous page because here we will use new class Validator.","title":"Simple Flask APP"},{"location":"flask%20integration/2_simple_flask/#prepare-flask-app","text":"Let's start with example of simple Flask APP and integrated validator: from flask import Flask , request from respect_validation import Validator as v from Validator import Validator app = Flask ( __name__ ) validator = Validator () @app . route ( \"/test\" , methods = [ 'POST' ]) def validation_test (): r = request . json output = { \"error\" : False , \"validation\" : None , \"data\" : None } validation = validator . validate ( r , { \"username\" : v . stringType () . alnum () . noWhitespace () . length ( 4 , 64 ), \"email\" : v . optional ( v . email ()), \"first_name\" : v . optional ( v . stringType () . length ( 3 , 64 )) . set_name ( 'First name' ), \"second_name\" : v . optional ( v . stringType () . length ( 3 , 64 )) . set_name ( 'Second name' ), \"password\" : v . stringType () . length ( 8 , 64 ), \"password_confirmation\" : v . stringType () . equals ( r . get ( 'password' , None )) . set_template ( 'Password confirmation' ), }, templates = { 'equals' : \"Password confirmation does match with Password\" }, check_unknown = True ) if validation . failed (): output [ 'error' ] = True output [ 'validation' ] = validation . get_messages () return output output [ \"data\" ] = \"User data is correct :)\" return output if __name__ == '__main__' : app . run ( port = 5959 , host = '0.0.0.0' , debug = True ) We imported respect_validation.Validator to write our validation rules and new class Validator to run validation.","title":"Prepare Flask APP"},{"location":"flask%20integration/2_simple_flask/#example-requestresponse","text":"For example, we send this request: { \"username\" : \"A\" , \"email\" : \"B\" , \"first_name\" : \"Alexey\" , \"second_name\" : \"\" , \"personal_id\" : \"\" , \"password\" : \"123\" , \"password_confirmation\" : \"321\" } Flask will responses us with this JSON: { \"data\" : null , \"error\" : true , \"validation\" : { \"_unknown_\" : [ \"Unknown field personal_id\" ], \"email\" : { \"allOf\" : [ \"All of the required rules must pass for Email\" , { \"email\" : [ \"Email must be valid email\" ] } ] }, \"first_name\" : null , \"password\" : { \"length\" : [ \"Password must have a length between 8 and 64\" ] }, \"password_confirmation\" : { \"equals\" : [ \"Password confirmation does match with Password\" ] }, \"second_name\" : null , \"username\" : { \"length\" : [ \"Username must have a length between 4 and 64\" ] } } } With some skill of JavaScript this output can turn into clear error messages for a user in web interface, but it is beyond of this guide :) Hope you will find this useful. If you want another example of using flask, sqlalchemy and respect_validation, please follow next page.","title":"Example request/response"},{"location":"flask%20integration/3_flask_sqlalchemy/","text":"Flask + SqlAlchemy This example is here because I want to show you how you can use validation in Model section. Create Model with validation First we will create our UserModel with validation inside: class UserModel ( db . Model ): __tablename__ = 'users' id = db . Column ( db . Integer , primary_key = True ) username = db . Column ( db . String ( 255 ), nullable = False , unique = True ) password = db . Column ( db . String ( 255 ), nullable = False ) email = db . Column ( db . String ( 255 ), nullable = True , default = '' ) first_name = db . Column ( db . String ( 255 ), nullable = True , default = '' ) second_name = db . Column ( db . String ( 255 ), nullable = True , default = '' ) @classmethod def find_by_id ( cls , _id : int ): return cls . query . filter_by ( id = _id ) . first () @classmethod def find_by_name ( cls , _id : int ): return cls . query . filter_by ( id = _id ) . first () def save_to_db ( self ) -> None : db . session . add ( self ) db . session . commit () def get ( self ): return { 'id' : self . id , 'username' : self . username , 'email' : self . email , 'first_name' : self . first_name , 'second_name' : self . second_name } @classmethod def validate ( cls , request ): validator = Validator () return validator . validate ( request , { \"username\" : v . stringType () . alnum () . noWhitespace () . length ( 4 , 64 ), \"email\" : v . optional ( v . email ()), \"first_name\" : v . optional ( v . stringType () . length ( 3 , 64 )) . set_name ( 'First name' ), \"second_name\" : v . optional ( v . stringType () . length ( 3 , 64 )) . set_name ( 'Second name' ), \"password\" : v . stringType () . length ( 8 , 64 ), \"password_confirmation\" : v . stringType () . equals ( request . get ( 'password' , None )) . set_template ( 'Password confirmation' ), }, templates = { 'equals' : \"Password confirmation does match with Password\" }, check_unknown = True ) With validation inside of Model you can easily validate incoming request to create or update your object. In example above I described validation for object creation, but you can play with it and add more validation if required (for example, for object update case). Flask preparation Finally, we will review our new simple flask app: from flask import Flask , request from flask_migrate import Migrate from db import db from user_model import UserModel app = Flask ( __name__ ) migrate = Migrate ( app , db ) app . config [ \"SQLALCHEMY_DATABASE_URI\" ] = 'sqlite:///app.db' app . config [ 'SQLALCHEMY_TRACK_MODIFICATIONS' ] = False @app . route ( \"/user\" , methods = [ 'POST' ]) def validation_test (): r = request . json output = { \"error\" : False , \"validation\" : None , \"data\" : None } # check if username already in DB if UserModel . find_by_name ( r . get ( 'username' , None )): output [ \"error\" ] = True return output validation = UserModel . validate ( r ) if validation . failed (): output [ \"error\" ] = True output [ \"validation\" ] = validation . get_messages () return output del r [ 'password_confirmation' ] new_user = UserModel ( ** r ) new_user . save_to_db () output [ \"data\" ] = { \"id\" : new_user . id } return output if __name__ == '__main__' : db . init_app ( app ) app . run ( port = 5959 , host = '127.0.0.1' , debug = True ) You can see the first check is if username is in DataBase or not. Of course, you can add your own custom rule to respect_validation to make this check in background, but it is out of scope for this guide. Example request/response Here is input request: { \"username\" : \"Alexey\" , \"first_name\" : \"A\" , \"second_name\" : \"Mochalin\" , \"email\" : \"Mochalin\" , \"password\" : \"123123\" , \"password_confirmation\" : \"123132\" } And response of flask: { \"data\" : null , \"error\" : true , \"validation\" : { \"_unknown_\" : [], \"email\" : { \"allOf\" : [ \"All of the required rules must pass for Email\" , { \"email\" : [ \"Email must be valid email\" ] } ] }, \"first_name\" : { \"allOf\" : [ \"All of the required rules must pass for First name\" , { \"length\" : [ \"First name must have a length between 3 and 64\" ] } ] }, \"password\" : { \"length\" : [ \"Password must have a length between 8 and 64\" ] }, \"password_confirmation\" : { \"equals\" : [ \"Password confirmation does match with Password\" ] }, \"second_name\" : null , \"username\" : null } } Hope it will be useful for you. You can find this code in example directory of main repository.","title":"Flask + SqlAlchemy"},{"location":"flask%20integration/3_flask_sqlalchemy/#flask-sqlalchemy","text":"This example is here because I want to show you how you can use validation in Model section.","title":"Flask + SqlAlchemy"},{"location":"flask%20integration/3_flask_sqlalchemy/#create-model-with-validation","text":"First we will create our UserModel with validation inside: class UserModel ( db . Model ): __tablename__ = 'users' id = db . Column ( db . Integer , primary_key = True ) username = db . Column ( db . String ( 255 ), nullable = False , unique = True ) password = db . Column ( db . String ( 255 ), nullable = False ) email = db . Column ( db . String ( 255 ), nullable = True , default = '' ) first_name = db . Column ( db . String ( 255 ), nullable = True , default = '' ) second_name = db . Column ( db . String ( 255 ), nullable = True , default = '' ) @classmethod def find_by_id ( cls , _id : int ): return cls . query . filter_by ( id = _id ) . first () @classmethod def find_by_name ( cls , _id : int ): return cls . query . filter_by ( id = _id ) . first () def save_to_db ( self ) -> None : db . session . add ( self ) db . session . commit () def get ( self ): return { 'id' : self . id , 'username' : self . username , 'email' : self . email , 'first_name' : self . first_name , 'second_name' : self . second_name } @classmethod def validate ( cls , request ): validator = Validator () return validator . validate ( request , { \"username\" : v . stringType () . alnum () . noWhitespace () . length ( 4 , 64 ), \"email\" : v . optional ( v . email ()), \"first_name\" : v . optional ( v . stringType () . length ( 3 , 64 )) . set_name ( 'First name' ), \"second_name\" : v . optional ( v . stringType () . length ( 3 , 64 )) . set_name ( 'Second name' ), \"password\" : v . stringType () . length ( 8 , 64 ), \"password_confirmation\" : v . stringType () . equals ( request . get ( 'password' , None )) . set_template ( 'Password confirmation' ), }, templates = { 'equals' : \"Password confirmation does match with Password\" }, check_unknown = True ) With validation inside of Model you can easily validate incoming request to create or update your object. In example above I described validation for object creation, but you can play with it and add more validation if required (for example, for object update case).","title":"Create Model with validation"},{"location":"flask%20integration/3_flask_sqlalchemy/#flask-preparation","text":"Finally, we will review our new simple flask app: from flask import Flask , request from flask_migrate import Migrate from db import db from user_model import UserModel app = Flask ( __name__ ) migrate = Migrate ( app , db ) app . config [ \"SQLALCHEMY_DATABASE_URI\" ] = 'sqlite:///app.db' app . config [ 'SQLALCHEMY_TRACK_MODIFICATIONS' ] = False @app . route ( \"/user\" , methods = [ 'POST' ]) def validation_test (): r = request . json output = { \"error\" : False , \"validation\" : None , \"data\" : None } # check if username already in DB if UserModel . find_by_name ( r . get ( 'username' , None )): output [ \"error\" ] = True return output validation = UserModel . validate ( r ) if validation . failed (): output [ \"error\" ] = True output [ \"validation\" ] = validation . get_messages () return output del r [ 'password_confirmation' ] new_user = UserModel ( ** r ) new_user . save_to_db () output [ \"data\" ] = { \"id\" : new_user . id } return output if __name__ == '__main__' : db . init_app ( app ) app . run ( port = 5959 , host = '127.0.0.1' , debug = True ) You can see the first check is if username is in DataBase or not. Of course, you can add your own custom rule to respect_validation to make this check in background, but it is out of scope for this guide.","title":"Flask preparation"},{"location":"flask%20integration/3_flask_sqlalchemy/#example-requestresponse","text":"Here is input request: { \"username\" : \"Alexey\" , \"first_name\" : \"A\" , \"second_name\" : \"Mochalin\" , \"email\" : \"Mochalin\" , \"password\" : \"123123\" , \"password_confirmation\" : \"123132\" } And response of flask: { \"data\" : null , \"error\" : true , \"validation\" : { \"_unknown_\" : [], \"email\" : { \"allOf\" : [ \"All of the required rules must pass for Email\" , { \"email\" : [ \"Email must be valid email\" ] } ] }, \"first_name\" : { \"allOf\" : [ \"All of the required rules must pass for First name\" , { \"length\" : [ \"First name must have a length between 3 and 64\" ] } ] }, \"password\" : { \"length\" : [ \"Password must have a length between 8 and 64\" ] }, \"password_confirmation\" : { \"equals\" : [ \"Password confirmation does match with Password\" ] }, \"second_name\" : null , \"username\" : null } } Hope it will be useful for you. You can find this code in example directory of main repository.","title":"Example request/response"},{"location":"rules/AllOf/","text":"AllOf AllOf(*rules: Any) Will validate if all inner validators validates. v . allOf ( v . intVal (), v . positive ()) . validate ( 15 ) # true Categorization Composite Nesting Changelog Version Description 1.0.0 Created See also: AnyOf NoneOf OneOf When","title":"AllOf"},{"location":"rules/AllOf/#allof","text":"AllOf(*rules: Any) Will validate if all inner validators validates. v . allOf ( v . intVal (), v . positive ()) . validate ( 15 ) # true","title":"AllOf"},{"location":"rules/AllOf/#categorization","text":"Composite Nesting","title":"Categorization"},{"location":"rules/AllOf/#changelog","text":"Version Description 1.0.0 Created See also: AnyOf NoneOf OneOf When","title":"Changelog"},{"location":"rules/Alnum/","text":"Alnum Alnum(*additional_chars: str) Validates whether the input is alphanumeric or not. Alphanumeric is a combination of alphabetic (a-z and A-Z) and numeric (0-9) characters. v . alnum () . validate ( 'foo 123' ) # false v . alnum ( ' ' ) . validate ( 'foo 123' ) # true v . alnum () . validate ( '100%' ) # false v . alnum ( '%' ) . validate ( '100%' ) # true v . alnum ( '%' , ',' ) . validate ( '10,5%' ) # true You can restrict case using the Lowercase and Uppercase rules. v . alnum () . uppercase () . validate ( 'example' ) # false IMPORTANT any input value will be converted to string type, except None. You can put any object type except NoneType object. You can restrict type by using type rule like StringType , IntType and so on. v . alnum () . validate ( 123456 ) # True v . stringType () . alnum () . validate ( 123456 ) # false Message template for this validator includes {additional_chars} as the string of extra chars passed as the parameter. Categorization Strings Changelog Version Description 1.0.0 Created See also: Alpha Charset Consonant Control Decimal Digit Lowercase NoWhitespace Regex StringType StringVal Uppercase Vowel","title":"Alnum"},{"location":"rules/Alnum/#alnum","text":"Alnum(*additional_chars: str) Validates whether the input is alphanumeric or not. Alphanumeric is a combination of alphabetic (a-z and A-Z) and numeric (0-9) characters. v . alnum () . validate ( 'foo 123' ) # false v . alnum ( ' ' ) . validate ( 'foo 123' ) # true v . alnum () . validate ( '100%' ) # false v . alnum ( '%' ) . validate ( '100%' ) # true v . alnum ( '%' , ',' ) . validate ( '10,5%' ) # true You can restrict case using the Lowercase and Uppercase rules. v . alnum () . uppercase () . validate ( 'example' ) # false IMPORTANT any input value will be converted to string type, except None. You can put any object type except NoneType object. You can restrict type by using type rule like StringType , IntType and so on. v . alnum () . validate ( 123456 ) # True v . stringType () . alnum () . validate ( 123456 ) # false Message template for this validator includes {additional_chars} as the string of extra chars passed as the parameter.","title":"Alnum"},{"location":"rules/Alnum/#categorization","text":"Strings","title":"Categorization"},{"location":"rules/Alnum/#changelog","text":"Version Description 1.0.0 Created See also: Alpha Charset Consonant Control Decimal Digit Lowercase NoWhitespace Regex StringType StringVal Uppercase Vowel","title":"Changelog"},{"location":"rules/Alpha/","text":"Alpha Alpha(*additional_chars: str) Validates whether the input contains only alphabetic characters. This is similar to Alnum , but it does not allow numbers. v . alpha () . validate ( 'some name' ) # false v . alpha ( ' ' ) . validate ( 'some name' ) # true v . alpha () . validate ( 'Cedric-Fabian' ) # false v . alpha ( '-' ) . validate ( 'Cedric-Fabian' ) # true v . alpha ( '-' , ' \\' ' ) . validate ( ' \\' s-Gravenhage' ) # true You can restrict case using the Lowercase and Uppercase rules. v . alpha () . uppercase () . validate ( 'example' ) # false IMPORTANT any input value will be converted to string type, except None. You can put any object type except NoneType object. You can restrict type by using type rule like StringType , IntType and so on. v . alpha ( '[' , ']' ) . validate ( list ()) # True v . stringType () . alpha ( '[' , ']' ) . validate ( list ()) # false Categorization Strings Changelog Version Description 1.0.0 Created See also: Alnum Charset Consonant Decimal Digit Lowercase NoWhitespace Regex Uppercase Vowel","title":"Alpha"},{"location":"rules/Alpha/#alpha","text":"Alpha(*additional_chars: str) Validates whether the input contains only alphabetic characters. This is similar to Alnum , but it does not allow numbers. v . alpha () . validate ( 'some name' ) # false v . alpha ( ' ' ) . validate ( 'some name' ) # true v . alpha () . validate ( 'Cedric-Fabian' ) # false v . alpha ( '-' ) . validate ( 'Cedric-Fabian' ) # true v . alpha ( '-' , ' \\' ' ) . validate ( ' \\' s-Gravenhage' ) # true You can restrict case using the Lowercase and Uppercase rules. v . alpha () . uppercase () . validate ( 'example' ) # false IMPORTANT any input value will be converted to string type, except None. You can put any object type except NoneType object. You can restrict type by using type rule like StringType , IntType and so on. v . alpha ( '[' , ']' ) . validate ( list ()) # True v . stringType () . alpha ( '[' , ']' ) . validate ( list ()) # false","title":"Alpha"},{"location":"rules/Alpha/#categorization","text":"Strings","title":"Categorization"},{"location":"rules/Alpha/#changelog","text":"Version Description 1.0.0 Created See also: Alnum Charset Consonant Decimal Digit Lowercase NoWhitespace Regex Uppercase Vowel","title":"Changelog"},{"location":"rules/AlwaysInvalid/","text":"AlwaysInvalid AlwaysInvalid() Validates any input as invalid. v . alwaysInvalid () . validate ( 'whatever' ) # false Categorization Booleans Changelog Version Description 1.0.0 Created See also: AlwaysValid When","title":"AlwaysInvalid"},{"location":"rules/AlwaysInvalid/#alwaysinvalid","text":"AlwaysInvalid() Validates any input as invalid. v . alwaysInvalid () . validate ( 'whatever' ) # false","title":"AlwaysInvalid"},{"location":"rules/AlwaysInvalid/#categorization","text":"Booleans","title":"Categorization"},{"location":"rules/AlwaysInvalid/#changelog","text":"Version Description 1.0.0 Created See also: AlwaysValid When","title":"Changelog"},{"location":"rules/AlwaysValid/","text":"AlwaysValid AlwaysValid() Validates any input as valid. v . alwaysValid () . validate ( 'whatever' ) # true Categorization Booleans Changelog Version Description 1.0.0 Created See also: AlwaysInvalid","title":"AlwaysValid"},{"location":"rules/AlwaysValid/#alwaysvalid","text":"AlwaysValid() Validates any input as valid. v . alwaysValid () . validate ( 'whatever' ) # true","title":"AlwaysValid"},{"location":"rules/AlwaysValid/#categorization","text":"Booleans","title":"Categorization"},{"location":"rules/AlwaysValid/#changelog","text":"Version Description 1.0.0 Created See also: AlwaysInvalid","title":"Changelog"},{"location":"rules/AnyOf/","text":"AnyOf AnyOf(*rules: Any) This is a group validator that acts as an OR operator. v . anyOf ( v . intVal (), v . floatVal ()) . validate ( 15.5 ) # true In the sample above, IntVal() doesn't validates, but FloatVal() validates, so AnyOf() returns true. AnyOf() returns true if at least one inner validator passes. Categorization Composite Nesting Changelog Version Description 1.0.0 Created See also: AllOf ContainsAny NoneOf OneOf When","title":"AnyOf"},{"location":"rules/AnyOf/#anyof","text":"AnyOf(*rules: Any) This is a group validator that acts as an OR operator. v . anyOf ( v . intVal (), v . floatVal ()) . validate ( 15.5 ) # true In the sample above, IntVal() doesn't validates, but FloatVal() validates, so AnyOf() returns true. AnyOf() returns true if at least one inner validator passes.","title":"AnyOf"},{"location":"rules/AnyOf/#categorization","text":"Composite Nesting","title":"Categorization"},{"location":"rules/AnyOf/#changelog","text":"Version Description 1.0.0 Created See also: AllOf ContainsAny NoneOf OneOf When","title":"Changelog"},{"location":"rules/Attribute/","text":"Attribute Attribute(reference: str, rule: Optional[AbstractRule] = None, mandatory: bool = True) Validates an object attribute, even private ones. class Object ( object ): pass obj = Object () obj . foo = 'bar' v . attribute ( 'foo' ) . validate ( obj ) # true You can also validate the attribute itself: v . attribute ( 'foo' , v . equals ( 'bar' )) . validate ( obj ) # true Third parameter makes the attribute presence optional (default True): v . attribute ( 'lorem' , v . stringType (), False ) . validate ( obj ) # true v . attribute ( 'alexey' , v . stringType (), mandatory = False ) . validate ( obj ) # true v . attribute ( 'alexey' , v . stringType (), mandatory = True ) . validate ( obj ) # false The name of this validator is automatically set to the attribute name. Categorization Nesting Objects Structures Changelog Version Description 1.0.0 Created See also: Key","title":"Attribute"},{"location":"rules/Attribute/#attribute","text":"Attribute(reference: str, rule: Optional[AbstractRule] = None, mandatory: bool = True) Validates an object attribute, even private ones. class Object ( object ): pass obj = Object () obj . foo = 'bar' v . attribute ( 'foo' ) . validate ( obj ) # true You can also validate the attribute itself: v . attribute ( 'foo' , v . equals ( 'bar' )) . validate ( obj ) # true Third parameter makes the attribute presence optional (default True): v . attribute ( 'lorem' , v . stringType (), False ) . validate ( obj ) # true v . attribute ( 'alexey' , v . stringType (), mandatory = False ) . validate ( obj ) # true v . attribute ( 'alexey' , v . stringType (), mandatory = True ) . validate ( obj ) # false The name of this validator is automatically set to the attribute name.","title":"Attribute"},{"location":"rules/Attribute/#categorization","text":"Nesting Objects Structures","title":"Categorization"},{"location":"rules/Attribute/#changelog","text":"Version Description 1.0.0 Created See also: Key","title":"Changelog"},{"location":"rules/Base64/","text":"Base64 Base64() Validate if a string is Base64-encoded. v . base64 () . validate ( 'cmVzcGVjdCE=' ) # true v . base64 () . validate ( 'respect!' ) # false Categorization Strings Changelog Version Description 1.0.0 Created See also: BaseNum","title":"Base64"},{"location":"rules/Base64/#base64","text":"Base64() Validate if a string is Base64-encoded. v . base64 () . validate ( 'cmVzcGVjdCE=' ) # true v . base64 () . validate ( 'respect!' ) # false","title":"Base64"},{"location":"rules/Base64/#categorization","text":"Strings","title":"Categorization"},{"location":"rules/Base64/#changelog","text":"Version Description 1.0.0 Created See also: BaseNum","title":"Changelog"},{"location":"rules/BaseNum/","text":"BaseNum BaseNum(base: int, chars: Optional[str] = None) Validate numbers in any base, even with non-regular bases. v . baseNum ( 2 ) . validate ( '011010001' ) # true v . baseNum ( 3 ) . validate ( '0120122001' ) # true v . baseNum ( 8 ) . validate ( '01234567520' ) # true v . baseNum ( 16 ) . validate ( '012a34f5675c20d' ) # true v . baseNum ( 2 ) . validate ( '0120122001' ) # false Categorization Numbers Changelog Version Description 1.0.0 Created See also: Base64 Uuid","title":"BaseNum"},{"location":"rules/BaseNum/#basenum","text":"BaseNum(base: int, chars: Optional[str] = None) Validate numbers in any base, even with non-regular bases. v . baseNum ( 2 ) . validate ( '011010001' ) # true v . baseNum ( 3 ) . validate ( '0120122001' ) # true v . baseNum ( 8 ) . validate ( '01234567520' ) # true v . baseNum ( 16 ) . validate ( '012a34f5675c20d' ) # true v . baseNum ( 2 ) . validate ( '0120122001' ) # false","title":"BaseNum"},{"location":"rules/BaseNum/#categorization","text":"Numbers","title":"Categorization"},{"location":"rules/BaseNum/#changelog","text":"Version Description 1.0.0 Created See also: Base64 Uuid","title":"Changelog"},{"location":"rules/Between/","text":"Between Between(min_val: Any, max_val: Any) Validates whether the input is between two other values. v . intVal () . between ( 10 , 20 ) . validate ( 10 ) # true v . intVal () . between ( 10 , 20 ) . validate ( 15 ) # true v . intVal () . between ( 10 , 20 ) . validate ( 20 ) # true Validation makes comparison easier, check out our supported comparable values . yesterday = datetime . today () - timedelta ( days = 1 ) tomorrow = datetime . today () + timedelta ( days = 1 ) now = datetime . today () v . dateTime () \\ . between ( yesterday , tomorrow ) \\ . validate ( now ) # true v . dateTime () . between ( '2022-04-01' , '2022-04-15' ) . validate ( '2022-04-07 10:12:11' ) # true Message template for this validator includes {{min_value}} and {{max_value}} . Categorization Comparisons Changelog Version Description 1.0.0 Created See also: DateTime GreaterThan Length LessThan Max Min","title":"Between"},{"location":"rules/Between/#between","text":"Between(min_val: Any, max_val: Any) Validates whether the input is between two other values. v . intVal () . between ( 10 , 20 ) . validate ( 10 ) # true v . intVal () . between ( 10 , 20 ) . validate ( 15 ) # true v . intVal () . between ( 10 , 20 ) . validate ( 20 ) # true Validation makes comparison easier, check out our supported comparable values . yesterday = datetime . today () - timedelta ( days = 1 ) tomorrow = datetime . today () + timedelta ( days = 1 ) now = datetime . today () v . dateTime () \\ . between ( yesterday , tomorrow ) \\ . validate ( now ) # true v . dateTime () . between ( '2022-04-01' , '2022-04-15' ) . validate ( '2022-04-07 10:12:11' ) # true Message template for this validator includes {{min_value}} and {{max_value}} .","title":"Between"},{"location":"rules/Between/#categorization","text":"Comparisons","title":"Categorization"},{"location":"rules/Between/#changelog","text":"Version Description 1.0.0 Created See also: DateTime GreaterThan Length LessThan Max Min","title":"Changelog"},{"location":"rules/BoolType/","text":"BoolType BoolType() Validates whether the type of the input is boolean. v . boolType () . validate ( True ) # true v . boolType () . validate ( False ) # true Categorization Booleans Types Changelog Version Description 1.0.0 Created See also: ListType BoolVal CallableType FloatType FloatVal IntType No NoneType Number StringType StringVal TrueVal Type Yes","title":"BoolType"},{"location":"rules/BoolType/#booltype","text":"BoolType() Validates whether the type of the input is boolean. v . boolType () . validate ( True ) # true v . boolType () . validate ( False ) # true","title":"BoolType"},{"location":"rules/BoolType/#categorization","text":"Booleans Types","title":"Categorization"},{"location":"rules/BoolType/#changelog","text":"Version Description 1.0.0 Created See also: ListType BoolVal CallableType FloatType FloatVal IntType No NoneType Number StringType StringVal TrueVal Type Yes","title":"Changelog"},{"location":"rules/BoolVal/","text":"BoolVal BoolVal() Boolean values for this rule are [0, 1, True, False, '0', '1', 'yes', 'no', 'on', 'off', 'true', 'false'] (all string values compare as lowercase). Validates if the input results in a boolean value: v . boolVal () . validate ( 'on' ) # true v . boolVal () . validate ( 'off' ) # true v . boolVal () . validate ( 'yes' ) # true v . boolVal () . validate ( 'no' ) # true v . boolVal () . validate ( 1 ) # true v . boolVal () . validate ( 0 ) # true Categorization Booleans Types Changelog Version Description 1.0.0 Created See also: BoolType CallableType FloatType FloatVal IntType No NoneType StringType TrueVal Type Yes","title":"BoolVal"},{"location":"rules/BoolVal/#boolval","text":"BoolVal() Boolean values for this rule are [0, 1, True, False, '0', '1', 'yes', 'no', 'on', 'off', 'true', 'false'] (all string values compare as lowercase). Validates if the input results in a boolean value: v . boolVal () . validate ( 'on' ) # true v . boolVal () . validate ( 'off' ) # true v . boolVal () . validate ( 'yes' ) # true v . boolVal () . validate ( 'no' ) # true v . boolVal () . validate ( 1 ) # true v . boolVal () . validate ( 0 ) # true","title":"BoolVal"},{"location":"rules/BoolVal/#categorization","text":"Booleans Types","title":"Categorization"},{"location":"rules/BoolVal/#changelog","text":"Version Description 1.0.0 Created See also: BoolType CallableType FloatType FloatVal IntType No NoneType StringType TrueVal Type Yes","title":"Changelog"},{"location":"rules/Bsn/","text":"Bsn Bsn() Validates a Dutch citizen service number ( BSN ). v . bsn () . validate ( '612890053' ) # true Categorization Identifications Changelog Version Description 1.0.0 Created See also: Cnh Cnpj Cpf Imei","title":"Bsn"},{"location":"rules/Bsn/#bsn","text":"Bsn() Validates a Dutch citizen service number ( BSN ). v . bsn () . validate ( '612890053' ) # true","title":"Bsn"},{"location":"rules/Bsn/#categorization","text":"Identifications","title":"Categorization"},{"location":"rules/Bsn/#changelog","text":"Version Description 1.0.0 Created See also: Cnh Cnpj Cpf Imei","title":"Changelog"},{"location":"rules/BytearrayType/","text":"BytearrayType BytearrayType() Validates whether the type of the input is bytearray. v . bytearrayType () . validate ( bytearray ( b 'hello world!' )) # true v . bytearrayType () . validate ( bytearray ([ 94 , 91 , 101 , 125 ])) # true Categorization Types Changelog Version Description 1.0.0 Created See also: ListType CallableType FloatType FloatVal IntType No NoneType Number StringType StringVal TrueVal Type Yes","title":"BytearrayType"},{"location":"rules/BytearrayType/#bytearraytype","text":"BytearrayType() Validates whether the type of the input is bytearray. v . bytearrayType () . validate ( bytearray ( b 'hello world!' )) # true v . bytearrayType () . validate ( bytearray ([ 94 , 91 , 101 , 125 ])) # true","title":"BytearrayType"},{"location":"rules/BytearrayType/#categorization","text":"Types","title":"Categorization"},{"location":"rules/BytearrayType/#changelog","text":"Version Description 1.0.0 Created See also: ListType CallableType FloatType FloatVal IntType No NoneType Number StringType StringVal TrueVal Type Yes","title":"Changelog"},{"location":"rules/BytesType/","text":"BytesType BytesType() Validates whether the type of the input is bytes. v . bytesType () . validate ( 'alexey' . encode ()) # true v . bytesType () . validate ( b 'bytes' ) # true Categorization Types Changelog Version Description 1.0.0 Created See also: ListType CallableType FloatType FloatVal IntType No NoneType Number StringType StringVal TrueVal Type Yes","title":"BytesType"},{"location":"rules/BytesType/#bytestype","text":"BytesType() Validates whether the type of the input is bytes. v . bytesType () . validate ( 'alexey' . encode ()) # true v . bytesType () . validate ( b 'bytes' ) # true","title":"BytesType"},{"location":"rules/BytesType/#categorization","text":"Types","title":"Categorization"},{"location":"rules/BytesType/#changelog","text":"Version Description 1.0.0 Created See also: ListType CallableType FloatType FloatVal IntType No NoneType Number StringType StringVal TrueVal Type Yes","title":"Changelog"},{"location":"rules/Call/","text":"Call Call(callable_fun: Any, rule: AbstractRule) Validates the return of a callable for a given input. Consider the following variable: url = 'https://www.google.com/search?q=respect.github.com' To validate every part of this URL we could use urlparse function to break its parts: from urllib.parse import urlparse parts = urlparse ( url ) This function returns an object ParseResult containing scheme , netloc , path and query . We can validate them this way: v . attribute ( 'scheme' , v . startsWith ( 'http' )) \\ . attribute ( 'netloc' , v . domain ()) \\ . attribute ( 'path' , v . stringType ()) \\ . attribute ( 'query' , v . notEmpty ()) \\ . validate ( parts ) Using v.call() you can do this in a single chain: v . call ( urlparse , v . attribute ( 'scheme' , v . startsWith ( 'http' )) \\ . attribute ( 'host' , v . domain ()) \\ . attribute ( 'path' , v . stringType ()) \\ . attribute ( 'query' , v . notEmpty ()) \\ ) . validate ( url ) Categorization Callables Nesting Changelog Version Description 1.0.0 Created See also: Callback Each","title":"Call"},{"location":"rules/Call/#call","text":"Call(callable_fun: Any, rule: AbstractRule) Validates the return of a callable for a given input. Consider the following variable: url = 'https://www.google.com/search?q=respect.github.com' To validate every part of this URL we could use urlparse function to break its parts: from urllib.parse import urlparse parts = urlparse ( url ) This function returns an object ParseResult containing scheme , netloc , path and query . We can validate them this way: v . attribute ( 'scheme' , v . startsWith ( 'http' )) \\ . attribute ( 'netloc' , v . domain ()) \\ . attribute ( 'path' , v . stringType ()) \\ . attribute ( 'query' , v . notEmpty ()) \\ . validate ( parts ) Using v.call() you can do this in a single chain: v . call ( urlparse , v . attribute ( 'scheme' , v . startsWith ( 'http' )) \\ . attribute ( 'host' , v . domain ()) \\ . attribute ( 'path' , v . stringType ()) \\ . attribute ( 'query' , v . notEmpty ()) \\ ) . validate ( url )","title":"Call"},{"location":"rules/Call/#categorization","text":"Callables Nesting","title":"Categorization"},{"location":"rules/Call/#changelog","text":"Version Description 1.0.0 Created See also: Callback Each","title":"Changelog"},{"location":"rules/CallableType/","text":"CallableType CallableType() Validates if the specified object is callable. v . callableType () . validate ( object ) # true v . callableType () . validate ( str ) # true v . callableType () . validate ( 'Am I True?' . lower ) # true Categorization Callables Types Changelog Version Description 1.0.0 Created See also: ListType BoolType BoolVal Callback FloatType IntType NoneType Number StringType StringVal Type","title":"CallableType"},{"location":"rules/CallableType/#callabletype","text":"CallableType() Validates if the specified object is callable. v . callableType () . validate ( object ) # true v . callableType () . validate ( str ) # true v . callableType () . validate ( 'Am I True?' . lower ) # true","title":"CallableType"},{"location":"rules/CallableType/#categorization","text":"Callables Types","title":"Categorization"},{"location":"rules/CallableType/#changelog","text":"Version Description 1.0.0 Created See also: ListType BoolType BoolVal Callback FloatType IntType NoneType Number StringType StringVal Type","title":"Changelog"},{"location":"rules/Callback/","text":"Callback Callback(callback: Any, *args, **kwargs) Validates the input using the return of a given callable. def check_val ( val : int ): return val < 100 v . callback ( check_val ) . validate ( 10 ) # true Categorization Callables Changelog Version Description 1.0.0 Created See also: Call CallableType","title":"Callback"},{"location":"rules/Callback/#callback","text":"Callback(callback: Any, *args, **kwargs) Validates the input using the return of a given callable. def check_val ( val : int ): return val < 100 v . callback ( check_val ) . validate ( 10 ) # true","title":"Callback"},{"location":"rules/Callback/#categorization","text":"Callables","title":"Categorization"},{"location":"rules/Callback/#changelog","text":"Version Description 1.0.0 Created See also: Call CallableType","title":"Changelog"},{"location":"rules/Charset/","text":"Charset Charset(*args: str) Validates if a string is in a specific charset. v . charset ( 'ASCII' ) . validate ( 'a\u00e7\u00facar' ) # false v . charset ( 'ASCII' ) . validate ( 'sugar' ) # true v . charset ( 'EUC-JP' , 'ISO-8859-1' ) . validate ( 'a\u00e7a\u00ed' . encode ( 'ISO-8859-1' )) # true The list of charsets has a logic OR, not AND. Categorization Strings Changelog Version Description 1.0.0 Created See also: Alnum Alpha","title":"Charset"},{"location":"rules/Charset/#charset","text":"Charset(*args: str) Validates if a string is in a specific charset. v . charset ( 'ASCII' ) . validate ( 'a\u00e7\u00facar' ) # false v . charset ( 'ASCII' ) . validate ( 'sugar' ) # true v . charset ( 'EUC-JP' , 'ISO-8859-1' ) . validate ( 'a\u00e7a\u00ed' . encode ( 'ISO-8859-1' )) # true The list of charsets has a logic OR, not AND.","title":"Charset"},{"location":"rules/Charset/#categorization","text":"Strings","title":"Categorization"},{"location":"rules/Charset/#changelog","text":"Version Description 1.0.0 Created See also: Alnum Alpha","title":"Changelog"},{"location":"rules/Cnh/","text":"Cnh Cnh() Validates a Brazilian driver's license. v . cnh () . validate ( '02650306461' ) # true Categorization Identifications Changelog Version Description 1.0.0 Created See also: Bsn Cnpj Cpf Imei Pis","title":"Cnh"},{"location":"rules/Cnh/#cnh","text":"Cnh() Validates a Brazilian driver's license. v . cnh () . validate ( '02650306461' ) # true","title":"Cnh"},{"location":"rules/Cnh/#categorization","text":"Identifications","title":"Categorization"},{"location":"rules/Cnh/#changelog","text":"Version Description 1.0.0 Created See also: Bsn Cnpj Cpf Imei Pis","title":"Changelog"},{"location":"rules/Cnpj/","text":"Cnpj Cnpj() Validates if the input is a Brazilian National Registry of Legal Entities (CNPJ) number. Ignores non-digit chars, so use .digit() if needed. v . cnpj () . validate ( '38175021000110' ) # true v . cnpj () . validate ( '32.063.364/0001-07' ) # true Categorization Identifications Changelog Version Description 1.0.0 Created See also: Bsn Cnh Cpf Imei Pis","title":"Cnpj"},{"location":"rules/Cnpj/#cnpj","text":"Cnpj() Validates if the input is a Brazilian National Registry of Legal Entities (CNPJ) number. Ignores non-digit chars, so use .digit() if needed. v . cnpj () . validate ( '38175021000110' ) # true v . cnpj () . validate ( '32.063.364/0001-07' ) # true","title":"Cnpj"},{"location":"rules/Cnpj/#categorization","text":"Identifications","title":"Categorization"},{"location":"rules/Cnpj/#changelog","text":"Version Description 1.0.0 Created See also: Bsn Cnh Cpf Imei Pis","title":"Changelog"},{"location":"rules/Consonant/","text":"Consonant Consonant(*additional_chars: str) Validates if the input contains only consonants. v . consonant () . validate ( 'xkcd' ) # true v . consonant ( '!@#$' ) . validate ( '!@xk#$cd' ) # true v . consonant ( '!@#$' , '}{?' ) . validate ( '{!@xk#$cd}' ) # true Categorization Strings Changelog Version Description 1.0.0 Created See also: Alnum Alpha Decimal Digit Vowel","title":"Consonant"},{"location":"rules/Consonant/#consonant","text":"Consonant(*additional_chars: str) Validates if the input contains only consonants. v . consonant () . validate ( 'xkcd' ) # true v . consonant ( '!@#$' ) . validate ( '!@xk#$cd' ) # true v . consonant ( '!@#$' , '}{?' ) . validate ( '{!@xk#$cd}' ) # true","title":"Consonant"},{"location":"rules/Consonant/#categorization","text":"Strings","title":"Categorization"},{"location":"rules/Consonant/#changelog","text":"Version Description 1.0.0 Created See also: Alnum Alpha Decimal Digit Vowel","title":"Changelog"},{"location":"rules/Contains/","text":"Contains Contains(contains_value, identical: bool = True) Validates if the input contains some value. For strings: v . contains ( 'ipsum' ) . validate ( 'lorem ipsum' ) # true For lists: v . contains ( 'ipsum' ) . validate ([ 'ipsum' , 'lorem' ]) # true A second parameter may be passed for comparison of strings as case-insensitive (default True). Message template for this validator includes {contains_value} . Categorization Arrays Strings Changelog Version Description 1.0.0 Created See also: ContainsAny EndsWith Equals Equivalent Identical Include Regex StartsWith Unique","title":"Contains"},{"location":"rules/Contains/#contains","text":"Contains(contains_value, identical: bool = True) Validates if the input contains some value. For strings: v . contains ( 'ipsum' ) . validate ( 'lorem ipsum' ) # true For lists: v . contains ( 'ipsum' ) . validate ([ 'ipsum' , 'lorem' ]) # true A second parameter may be passed for comparison of strings as case-insensitive (default True). Message template for this validator includes {contains_value} .","title":"Contains"},{"location":"rules/Contains/#categorization","text":"Arrays Strings","title":"Categorization"},{"location":"rules/Contains/#changelog","text":"Version Description 1.0.0 Created See also: ContainsAny EndsWith Equals Equivalent Identical Include Regex StartsWith Unique","title":"Changelog"},{"location":"rules/ContainsAny/","text":"ContainsAny ContainsAny(needles: List[Any], identical: bool = True) Validates if the input contains at least one of defined values For strings (comparing is case-insensitive): v . containsAny ([ 'lorem' , 'dolor' ], identical = False ) . validate ( 'loReM ipsum' ) # true For lists (comparing is case-sensitive to respect \"contains\" behavior): v . containsAny ([ 'lorem' , 'dolor' ]) . validate ([ 'ipsum' , 'lorem' ]) # true v . containsAny ([ 'lorem' , 'dolor' ]) . validate ([ 'ipsum' , 'lOrEm' ]) # false A second parameter may be passed for comparison of strings as case-insensitive (default True). Message template for this validator includes {needles} . Categorization Arrays Strings Changelog Version Description 1.0.0 Created See also: AnyOf Contains Equivalent Include","title":"ContainsAny"},{"location":"rules/ContainsAny/#containsany","text":"ContainsAny(needles: List[Any], identical: bool = True) Validates if the input contains at least one of defined values For strings (comparing is case-insensitive): v . containsAny ([ 'lorem' , 'dolor' ], identical = False ) . validate ( 'loReM ipsum' ) # true For lists (comparing is case-sensitive to respect \"contains\" behavior): v . containsAny ([ 'lorem' , 'dolor' ]) . validate ([ 'ipsum' , 'lorem' ]) # true v . containsAny ([ 'lorem' , 'dolor' ]) . validate ([ 'ipsum' , 'lOrEm' ]) # false A second parameter may be passed for comparison of strings as case-insensitive (default True). Message template for this validator includes {needles} .","title":"ContainsAny"},{"location":"rules/ContainsAny/#categorization","text":"Arrays Strings","title":"Categorization"},{"location":"rules/ContainsAny/#changelog","text":"Version Description 1.0.0 Created See also: AnyOf Contains Equivalent Include","title":"Changelog"},{"location":"rules/Control/","text":"Control Control(*additional_chars: str) Validates if all characters in the provided string, are control characters. v . control () . validate ( \" \\n\\r\\t \" ) # true Categorization Strings Changelog Version Description 1.0.0 Created See also: Alnum Printable Punct Space","title":"Control"},{"location":"rules/Control/#control","text":"Control(*additional_chars: str) Validates if all characters in the provided string, are control characters. v . control () . validate ( \" \\n\\r\\t \" ) # true","title":"Control"},{"location":"rules/Control/#categorization","text":"Strings","title":"Categorization"},{"location":"rules/Control/#changelog","text":"Version Description 1.0.0 Created See also: Alnum Printable Punct Space","title":"Changelog"},{"location":"rules/Countable/","text":"Countable Countable() Validates if the input is countable, in other words, if input has __len__ attribute. v . countable () . validate ([]) # true v . countable () . validate ( range ( 10 )) # true v . countable () . validate ( 100 ) # false Categorization Types Changelog Version Description 1.0.0 Created See also: ListType Instance Iterable","title":"Countable"},{"location":"rules/Countable/#countable","text":"Countable() Validates if the input is countable, in other words, if input has __len__ attribute. v . countable () . validate ([]) # true v . countable () . validate ( range ( 10 )) # true v . countable () . validate ( 100 ) # false","title":"Countable"},{"location":"rules/Countable/#categorization","text":"Types","title":"Categorization"},{"location":"rules/Countable/#changelog","text":"Version Description 1.0.0 Created See also: ListType Instance Iterable","title":"Changelog"},{"location":"rules/CountryCode/","text":"CountryCode CountryCode(code_set: str = 'alpha-2') Validates whether the input is a country code in ISO 3166-1 standard. v . countryCode () . validate ( 'BR' ) # true v . countryCode ( 'alpha-2' ) . validate ( 'NL' ) # true v . countryCode ( 'alpha-3' ) . validate ( 'USA' ) # true v . countryCode ( 'numeric' ) . validate ( '504' ) # true This rule supports the three sets of country codes: ISO 3166-1 alpha-2 ( 'alpha-2' or CountryCode.ALPHA2 ) ISO 3166-1 alpha-3 ( 'alpha-3' or CountryCode.ALPHA3 ) ISO 3166-1 numeric ( 'numeric' or CountryCode.NUMERIC ). When no code_set is defined the rule uses 'alpha-2' ( CountryCode.ALPHA2 ). This rule uses library pycountry . Categorization ISO codes Localization Changelog Version Description 1.0.0 Created See also: CurrencyCode LanguageCode PostalCode Tld","title":"CountryCode"},{"location":"rules/CountryCode/#countrycode","text":"CountryCode(code_set: str = 'alpha-2') Validates whether the input is a country code in ISO 3166-1 standard. v . countryCode () . validate ( 'BR' ) # true v . countryCode ( 'alpha-2' ) . validate ( 'NL' ) # true v . countryCode ( 'alpha-3' ) . validate ( 'USA' ) # true v . countryCode ( 'numeric' ) . validate ( '504' ) # true This rule supports the three sets of country codes: ISO 3166-1 alpha-2 ( 'alpha-2' or CountryCode.ALPHA2 ) ISO 3166-1 alpha-3 ( 'alpha-3' or CountryCode.ALPHA3 ) ISO 3166-1 numeric ( 'numeric' or CountryCode.NUMERIC ). When no code_set is defined the rule uses 'alpha-2' ( CountryCode.ALPHA2 ). This rule uses library pycountry .","title":"CountryCode"},{"location":"rules/CountryCode/#categorization","text":"ISO codes Localization","title":"Categorization"},{"location":"rules/CountryCode/#changelog","text":"Version Description 1.0.0 Created See also: CurrencyCode LanguageCode PostalCode Tld","title":"Changelog"},{"location":"rules/Cpf/","text":"Cpf Cpf() Validates a Brazillian CPF number. v . cpf () . validate ( '11598647644' ) # true It ignores any non-digit char: v . cpf () . validate ( '693.319.118-40' ) # true If you need to validate digits only, add .digit() to the chain: v . digit () . cpf () . validate ( '11598647644' ) # true Categorization Identifications Changelog Version Description 1.0.0 Created See also: Bsn Cnh Cnpj Imei Pis","title":"Cpf"},{"location":"rules/Cpf/#cpf","text":"Cpf() Validates a Brazillian CPF number. v . cpf () . validate ( '11598647644' ) # true It ignores any non-digit char: v . cpf () . validate ( '693.319.118-40' ) # true If you need to validate digits only, add .digit() to the chain: v . digit () . cpf () . validate ( '11598647644' ) # true","title":"Cpf"},{"location":"rules/Cpf/#categorization","text":"Identifications","title":"Categorization"},{"location":"rules/Cpf/#changelog","text":"Version Description 1.0.0 Created See also: Bsn Cnh Cnpj Imei Pis","title":"Changelog"},{"location":"rules/CreditCard/","text":"CreditCard CreditCard(brand: str = 'any') Validates a credit card number. v . creditCard () . validate ( '5376 7473 9720 8720' ) # true v . creditCard () . validate ( '5376-7473-9720-8720' ) # true v . creditCard () . validate ( '5376.7473.9720.8720' ) # true v . creditCard ( 'American Express' ) . validate ( '340316193809364' ) # true v . creditCard ( 'Diners Club' ) . validate ( '30351042633884' ) # true v . creditCard ( 'Discover' ) . validate ( '6011000990139424' ) # true v . creditCard ( 'JCB' ) . validate ( '3566002020360505' ) # true v . creditCard ( 'MasterCard' ) . validate ( '5376747397208720' ) # true v . creditCard ( 'Visa' ) . validate ( '4024007153361885' ) # true The current supported brands are: American Express ( 'American Express' or CreditCard.AMERICAN_EXPRESS ) Diners Club ( 'Diners Club' or CreditCard.DINERS_CLUB ) Discover ( 'Discover' or CreditCard.DISCOVER ) JCB ( 'JCB' or CreditCard.JCB ) MasterCard ( 'MasterCard' or CreditCard.MASTERCARD ) Visa ( 'Visa' or CreditCard.VISA ) It ignores any non-numeric characters, use Digit , NoWhitespace , or Regex when appropriate. v . digit () . creditCard () . validate ( '5376747397208720' ) # true Categorization Banking Changelog Version Description 1.0.0 Created See also: Decimal Digit Iban Luhn NoWhitespace Regex","title":"CreditCard"},{"location":"rules/CreditCard/#creditcard","text":"CreditCard(brand: str = 'any') Validates a credit card number. v . creditCard () . validate ( '5376 7473 9720 8720' ) # true v . creditCard () . validate ( '5376-7473-9720-8720' ) # true v . creditCard () . validate ( '5376.7473.9720.8720' ) # true v . creditCard ( 'American Express' ) . validate ( '340316193809364' ) # true v . creditCard ( 'Diners Club' ) . validate ( '30351042633884' ) # true v . creditCard ( 'Discover' ) . validate ( '6011000990139424' ) # true v . creditCard ( 'JCB' ) . validate ( '3566002020360505' ) # true v . creditCard ( 'MasterCard' ) . validate ( '5376747397208720' ) # true v . creditCard ( 'Visa' ) . validate ( '4024007153361885' ) # true The current supported brands are: American Express ( 'American Express' or CreditCard.AMERICAN_EXPRESS ) Diners Club ( 'Diners Club' or CreditCard.DINERS_CLUB ) Discover ( 'Discover' or CreditCard.DISCOVER ) JCB ( 'JCB' or CreditCard.JCB ) MasterCard ( 'MasterCard' or CreditCard.MASTERCARD ) Visa ( 'Visa' or CreditCard.VISA ) It ignores any non-numeric characters, use Digit , NoWhitespace , or Regex when appropriate. v . digit () . creditCard () . validate ( '5376747397208720' ) # true","title":"CreditCard"},{"location":"rules/CreditCard/#categorization","text":"Banking","title":"Categorization"},{"location":"rules/CreditCard/#changelog","text":"Version Description 1.0.0 Created See also: Decimal Digit Iban Luhn NoWhitespace Regex","title":"Changelog"},{"location":"rules/CurrencyCode/","text":"CurrencyCode CurrencyCode(code_set: str = 'alpha-2') Validates an ISO 4217 currency code like GBP or EUR. v . currencyCode () . validate ( 'GBP' ) # true v . currencyCode ( 'alpha-3' ) . validate ( 'EUR' ) # true v . currencyCode ( 'numeric' ) . validate ( '840' ) # true This rule uses library pycountry . Categorization ISO codes Localization Changelog Version Description 1.0.0 Created See also: CountryCode","title":"CurrencyCode"},{"location":"rules/CurrencyCode/#currencycode","text":"CurrencyCode(code_set: str = 'alpha-2') Validates an ISO 4217 currency code like GBP or EUR. v . currencyCode () . validate ( 'GBP' ) # true v . currencyCode ( 'alpha-3' ) . validate ( 'EUR' ) # true v . currencyCode ( 'numeric' ) . validate ( '840' ) # true This rule uses library pycountry .","title":"CurrencyCode"},{"location":"rules/CurrencyCode/#categorization","text":"ISO codes Localization","title":"Categorization"},{"location":"rules/CurrencyCode/#changelog","text":"Version Description 1.0.0 Created See also: CountryCode","title":"Changelog"},{"location":"rules/Date/","text":"Date Date(date_format: str = '%Y-%m-%d') Validates if input is a date. The date_format argument should be in accordance to datetime Format Code string. When a date_format is not given its default value is %Y-%m-%d . If input is instance of datetime, then it is treated as valid. v . date () . validate ( '2017-12-31' ) # true v . date () . validate ( '2020-02-29' ) # true v . date () . validate ( '2019-02-29' ) # false v . date ( '%m/ %d /%y' ) . validate ( '12/31/17' ) # true v . date ( '%b %d , %Y' ) . validate ( 'May 1, 2022' ) # true v . date ( '%Y %d %m' ) . validate ( '20173112' ) # true Categorization Date and Time Changelog Version Description 1.0.0 Created See also: DateTime LeapDate LeapYear Time","title":"Date"},{"location":"rules/Date/#date","text":"Date(date_format: str = '%Y-%m-%d') Validates if input is a date. The date_format argument should be in accordance to datetime Format Code string. When a date_format is not given its default value is %Y-%m-%d . If input is instance of datetime, then it is treated as valid. v . date () . validate ( '2017-12-31' ) # true v . date () . validate ( '2020-02-29' ) # true v . date () . validate ( '2019-02-29' ) # false v . date ( '%m/ %d /%y' ) . validate ( '12/31/17' ) # true v . date ( '%b %d , %Y' ) . validate ( 'May 1, 2022' ) # true v . date ( '%Y %d %m' ) . validate ( '20173112' ) # true","title":"Date"},{"location":"rules/Date/#categorization","text":"Date and Time","title":"Categorization"},{"location":"rules/Date/#changelog","text":"Version Description 1.0.0 Created See also: DateTime LeapDate LeapYear Time","title":"Changelog"},{"location":"rules/DateTime/","text":"DateTime DateTime(date_format: Optional[str] = None) Validates whether an input is a date/time or not. The date_format argument should be in accordance to datetime Format Code string. By default, date_format is None but this rule try to convert string to date based on ISO format. To convert string to date it uses fromisoformat method. Input in ISO format: v . dateTime () . validate ( '2022-01-01' ) # true v . dateTime () . validate ( '2022-01-01 15:11:12' ) # true v . dateTime () . validate ( '2022-01-01T15:11:12' ) # true Also accepts datetime instances: v . dateTime () . validate ( datetime . fromtimestamp ( 1657598400 )) # true You can pass a format when validating strings: v . dateTime ( '%Y-%m- %d ' ) . validate ( '01-01-2009' ) # false v . dateTime ( ' %d -%m-%Y' ) . validate ( '01-01-2009' ) # true Format has no effect when validating datetime instances. Message template for this validator includes {sample} which is a sample of an expected date. try : v . dateTime ( '%Y-%m- %d ' ) . check ( '01-01-2009' ) except ValidationException as exception : print ( exception . get_message ()) Output: \"01-01-2009\" must be a valid date/time in the format 2022-04-26 Categorization Date and Time Changelog Version Description 1.0.0 Created See also: Between Date LeapDate LeapYear Time","title":"DateTime"},{"location":"rules/DateTime/#datetime","text":"DateTime(date_format: Optional[str] = None) Validates whether an input is a date/time or not. The date_format argument should be in accordance to datetime Format Code string. By default, date_format is None but this rule try to convert string to date based on ISO format. To convert string to date it uses fromisoformat method. Input in ISO format: v . dateTime () . validate ( '2022-01-01' ) # true v . dateTime () . validate ( '2022-01-01 15:11:12' ) # true v . dateTime () . validate ( '2022-01-01T15:11:12' ) # true Also accepts datetime instances: v . dateTime () . validate ( datetime . fromtimestamp ( 1657598400 )) # true You can pass a format when validating strings: v . dateTime ( '%Y-%m- %d ' ) . validate ( '01-01-2009' ) # false v . dateTime ( ' %d -%m-%Y' ) . validate ( '01-01-2009' ) # true Format has no effect when validating datetime instances. Message template for this validator includes {sample} which is a sample of an expected date. try : v . dateTime ( '%Y-%m- %d ' ) . check ( '01-01-2009' ) except ValidationException as exception : print ( exception . get_message ()) Output: \"01-01-2009\" must be a valid date/time in the format 2022-04-26","title":"DateTime"},{"location":"rules/DateTime/#categorization","text":"Date and Time","title":"Categorization"},{"location":"rules/DateTime/#changelog","text":"Version Description 1.0.0 Created See also: Between Date LeapDate LeapYear Time","title":"Changelog"},{"location":"rules/Decimal/","text":"Decimal Decimal(decimals: int) Validates whether the input matches the expected number of decimals. v . decimal ( 2 ) . validate ( '27990.50' ) # true v . decimal ( 1 ) . validate ( '27990.50' ) # false v . decimal ( 1 ) . validate ( 1.5 ) # true Known limitations When validating float types, it is not possible to determine the amount of ending zeros and because of that, validations like the ones below will pass. v . decimal ( 1 ) . validate ( 1.50 ) # true Categorization Numbers Changelog Version Description 1.0.0 Created See also: Alnum Alpha Consonant CreditCard Factor Finite Infinite IntType IntVal NumericVal Regex Uuid Vowel","title":"Decimal"},{"location":"rules/Decimal/#decimal","text":"Decimal(decimals: int) Validates whether the input matches the expected number of decimals. v . decimal ( 2 ) . validate ( '27990.50' ) # true v . decimal ( 1 ) . validate ( '27990.50' ) # false v . decimal ( 1 ) . validate ( 1.5 ) # true","title":"Decimal"},{"location":"rules/Decimal/#known-limitations","text":"When validating float types, it is not possible to determine the amount of ending zeros and because of that, validations like the ones below will pass. v . decimal ( 1 ) . validate ( 1.50 ) # true","title":"Known limitations"},{"location":"rules/Decimal/#categorization","text":"Numbers","title":"Categorization"},{"location":"rules/Decimal/#changelog","text":"Version Description 1.0.0 Created See also: Alnum Alpha Consonant CreditCard Factor Finite Infinite IntType IntVal NumericVal Regex Uuid Vowel","title":"Changelog"},{"location":"rules/DictType/","text":"DictType DictType() Validates whether an input is type of dict. v . dictType () . validate ( dict ()) # true v . dictType () . validate ({}) # true v . dictType () . validate ({ 'hello' : 'world' }) # true v . dictType () . validate ( 'Am I dict?' ) # false Categorization Lists Arrays Types Changelog Version Description 1.0.0 Created See also: BoolType CallableType Countable FloatType IntType Iterable NoneType StringType Subset Type Unique","title":"DictType"},{"location":"rules/DictType/#dicttype","text":"DictType() Validates whether an input is type of dict. v . dictType () . validate ( dict ()) # true v . dictType () . validate ({}) # true v . dictType () . validate ({ 'hello' : 'world' }) # true v . dictType () . validate ( 'Am I dict?' ) # false","title":"DictType"},{"location":"rules/DictType/#categorization","text":"Lists Arrays Types","title":"Categorization"},{"location":"rules/DictType/#changelog","text":"Version Description 1.0.0 Created See also: BoolType CallableType Countable FloatType IntType Iterable NoneType StringType Subset Type Unique","title":"Changelog"},{"location":"rules/Digit/","text":"Digit Digit(*additional_chars: str) Validates whether the input contains only digits. Support only string type. v . digit () . validate ( '020 612 1851' ) # false v . digit ( ' ' ) . validate ( '020 612 1851' ) # true v . digit () . validate ( '172.655.537-21' ) # false v . digit ( '.' , '-' ) . validate ( '172.655.537-21' ) # true Categorization Numbers Strings Changelog Version Description 1.0.0 Created See also: Alnum Alpha Consonant CreditCard Factor Finite Infinite IntType IntVal NumericVal Regex Uuid Vowel","title":"Digit"},{"location":"rules/Digit/#digit","text":"Digit(*additional_chars: str) Validates whether the input contains only digits. Support only string type. v . digit () . validate ( '020 612 1851' ) # false v . digit ( ' ' ) . validate ( '020 612 1851' ) # true v . digit () . validate ( '172.655.537-21' ) # false v . digit ( '.' , '-' ) . validate ( '172.655.537-21' ) # true","title":"Digit"},{"location":"rules/Digit/#categorization","text":"Numbers Strings","title":"Categorization"},{"location":"rules/Digit/#changelog","text":"Version Description 1.0.0 Created See also: Alnum Alpha Consonant CreditCard Factor Finite Infinite IntType IntVal NumericVal Regex Uuid Vowel","title":"Changelog"},{"location":"rules/Directory/","text":"Directory Directory() Validates if the given path is a directory. v . directory () . validate ( '/tmp' ) # true v . directory () . validate ( __file__ ) # false Categorization File system Changelog Version Description 1.0.0 Created See also: Executable Exists Extension File Image Mimetype Readable Size SymbolicLink Writable","title":"Directory"},{"location":"rules/Directory/#directory","text":"Directory() Validates if the given path is a directory. v . directory () . validate ( '/tmp' ) # true v . directory () . validate ( __file__ ) # false","title":"Directory"},{"location":"rules/Directory/#categorization","text":"File system","title":"Categorization"},{"location":"rules/Directory/#changelog","text":"Version Description 1.0.0 Created See also: Executable Exists Extension File Image Mimetype Readable Size SymbolicLink Writable","title":"Changelog"},{"location":"rules/Domain/","text":"Domain Domain(tld_check: bool = True) Validates whether the input is a valid domain name or not. v . domain () . validate ( 'google.com' ) # true You can skip top level domain (TLD) checks to validate internal domain names: v . domain ( False ) . validate ( 'dev.machine.local' ) # true v . domain ( True ) . validate ( 'dev.machine.local' ) # false This is a composite validator, it validates several rules internally: If input is an IP address, it fails. If input contains whitespace, it fails. If input does not contain any dots, it fails. If input has less than two parts, it fails. Input must end with a top-level-domain to pass (if not skipped). Each part must be alphanumeric and not start with an hyphen. PunnyCode is accepted for Internationalizing Domain Names in Applications . Messages for this validator will reflect rules above. Categorization Internet Changelog Version Description 1.0.0 Created See also: Ip Json MacAddress Tld Url","title":"Domain"},{"location":"rules/Domain/#domain","text":"Domain(tld_check: bool = True) Validates whether the input is a valid domain name or not. v . domain () . validate ( 'google.com' ) # true You can skip top level domain (TLD) checks to validate internal domain names: v . domain ( False ) . validate ( 'dev.machine.local' ) # true v . domain ( True ) . validate ( 'dev.machine.local' ) # false This is a composite validator, it validates several rules internally: If input is an IP address, it fails. If input contains whitespace, it fails. If input does not contain any dots, it fails. If input has less than two parts, it fails. Input must end with a top-level-domain to pass (if not skipped). Each part must be alphanumeric and not start with an hyphen. PunnyCode is accepted for Internationalizing Domain Names in Applications . Messages for this validator will reflect rules above.","title":"Domain"},{"location":"rules/Domain/#categorization","text":"Internet","title":"Categorization"},{"location":"rules/Domain/#changelog","text":"Version Description 1.0.0 Created See also: Ip Json MacAddress Tld Url","title":"Changelog"},{"location":"rules/Each/","text":"Each Each(rule: AbstractRule) Validates whether each value in the input is valid according to another rule. release_dates = { 'validation' : '2010-01-01' , 'template' : '2011-01-01' , 'relational' : '2011-02-05' , } v . each ( v . dateTime ()) . validate ( release_dates . values ()) # true You can also validate array keys combining this rule with Call : v . call ( 'values' , v . each ( v . stringType ())) . validate ( release_dates ) # true This rule will not validate values that are not iterable (don't have attribute __iter__ ), to have a more detailed error message, add Iterable to your chain, for example. If the input is empty list then this rule will consider the value as valid, please use NotEmpty if required: v . each ( v . dateTime ()) . validate ([]) # true v . notEmpty () . each ( v . dateTime ()) . validate ([]) # false Categorization Arrays Nesting Changelog Version Description 1.0.0 Created See also: Call Iterable Key NotEmpty Unique","title":"Each"},{"location":"rules/Each/#each","text":"Each(rule: AbstractRule) Validates whether each value in the input is valid according to another rule. release_dates = { 'validation' : '2010-01-01' , 'template' : '2011-01-01' , 'relational' : '2011-02-05' , } v . each ( v . dateTime ()) . validate ( release_dates . values ()) # true You can also validate array keys combining this rule with Call : v . call ( 'values' , v . each ( v . stringType ())) . validate ( release_dates ) # true This rule will not validate values that are not iterable (don't have attribute __iter__ ), to have a more detailed error message, add Iterable to your chain, for example. If the input is empty list then this rule will consider the value as valid, please use NotEmpty if required: v . each ( v . dateTime ()) . validate ([]) # true v . notEmpty () . each ( v . dateTime ()) . validate ([]) # false","title":"Each"},{"location":"rules/Each/#categorization","text":"Arrays Nesting","title":"Categorization"},{"location":"rules/Each/#changelog","text":"Version Description 1.0.0 Created See also: Call Iterable Key NotEmpty Unique","title":"Changelog"},{"location":"rules/Email/","text":"Email Email(whitelist: Optional[List[str]] = None) Validates an email address. v . email () . validate ( 'amochalini@gmail.com' ) # true This rule uses validation from kvesteri/validators and also at the end I added addition regex from emailregex.com because the first validator can pass emails which ends with - (dash). You can add whitelist - domain names which will be treated as whitelist, by default is has one value - 'localhost'. Categorization Internet Changelog Version Description 1.0.0 Created See also: Domain Json Phone Url VideoUrl","title":"Email"},{"location":"rules/Email/#email","text":"Email(whitelist: Optional[List[str]] = None) Validates an email address. v . email () . validate ( 'amochalini@gmail.com' ) # true This rule uses validation from kvesteri/validators and also at the end I added addition regex from emailregex.com because the first validator can pass emails which ends with - (dash). You can add whitelist - domain names which will be treated as whitelist, by default is has one value - 'localhost'.","title":"Email"},{"location":"rules/Email/#categorization","text":"Internet","title":"Categorization"},{"location":"rules/Email/#changelog","text":"Version Description 1.0.0 Created See also: Domain Json Phone Url VideoUrl","title":"Changelog"},{"location":"rules/EndsWith/","text":"EndsWith EndsWith(end_value: Union[str, List[Any], Tuple[Any]]) This validator is similar to Contains() , but validates only if the value is at the end of the input. For strings: v . endsWith ( 'ipsum' ) . validate ( 'lorem ipsum' ) # true For arrays: v . endsWith ( 'ipsum' ) . validate ([ 'lorem' , 'ipsum' ]) # true Message template for this validator includes {end_value} . Categorization Arrays Strings Changelog Version Description 1.0.0 Created See also: Contains Include Regex StartsWith","title":"EndsWith"},{"location":"rules/EndsWith/#endswith","text":"EndsWith(end_value: Union[str, List[Any], Tuple[Any]]) This validator is similar to Contains() , but validates only if the value is at the end of the input. For strings: v . endsWith ( 'ipsum' ) . validate ( 'lorem ipsum' ) # true For arrays: v . endsWith ( 'ipsum' ) . validate ([ 'lorem' , 'ipsum' ]) # true Message template for this validator includes {end_value} .","title":"EndsWith"},{"location":"rules/EndsWith/#categorization","text":"Arrays Strings","title":"Categorization"},{"location":"rules/EndsWith/#changelog","text":"Version Description 1.0.0 Created See also: Contains Include Regex StartsWith","title":"Changelog"},{"location":"rules/Equals/","text":"Equals Equals(compare_to: Any) Validates if the input is equal to some value. v . equals ( 'alganet' ) . validate ( 'alganet' ) # true Message template for this validator includes {compare_to} . Categorization Comparisons Changelog Version Description 1.0.0 Created See also: Contains Equivalent Identical KeyValue Version","title":"Equals"},{"location":"rules/Equals/#equals","text":"Equals(compare_to: Any) Validates if the input is equal to some value. v . equals ( 'alganet' ) . validate ( 'alganet' ) # true Message template for this validator includes {compare_to} .","title":"Equals"},{"location":"rules/Equals/#categorization","text":"Comparisons","title":"Categorization"},{"location":"rules/Equals/#changelog","text":"Version Description 1.0.0 Created See also: Contains Equivalent Identical KeyValue Version","title":"Changelog"},{"location":"rules/Equivalent/","text":"Equivalent Equivalent(compare_to: Any) Validates if the input is equivalent to some value. v . equivalent ( 1 ) . validate ( True ) # true v . equivalent ( 'Something' ) . validate ( 'someThing' ) # true v . equivalent ([ 1 , 2 , 3 , 4 , 5 ]) . validate ([ 1 , 2 , 3 , 4 , 5 ]) # true This rule is very similar to Equals but it does not make case-sensitive comparisons. Message template for this validator includes {compare_to} . Categorization Comparisons Changelog Version Description 1.0.0 Created See also: Contains ContainsAny Equals Identical","title":"Equivalent"},{"location":"rules/Equivalent/#equivalent","text":"Equivalent(compare_to: Any) Validates if the input is equivalent to some value. v . equivalent ( 1 ) . validate ( True ) # true v . equivalent ( 'Something' ) . validate ( 'someThing' ) # true v . equivalent ([ 1 , 2 , 3 , 4 , 5 ]) . validate ([ 1 , 2 , 3 , 4 , 5 ]) # true This rule is very similar to Equals but it does not make case-sensitive comparisons. Message template for this validator includes {compare_to} .","title":"Equivalent"},{"location":"rules/Equivalent/#categorization","text":"Comparisons","title":"Categorization"},{"location":"rules/Equivalent/#changelog","text":"Version Description 1.0.0 Created See also: Contains ContainsAny Equals Identical","title":"Changelog"},{"location":"rules/Even/","text":"Even Even() Validates whether the input is an even number or not. v . intVal () . even () . validate ( 2 ) # true Using int() before even() is a best practice. Categorization Numbers Changelog Version Description 1.0.0 Created See also: Multiple Odd","title":"Even"},{"location":"rules/Even/#even","text":"Even() Validates whether the input is an even number or not. v . intVal () . even () . validate ( 2 ) # true Using int() before even() is a best practice.","title":"Even"},{"location":"rules/Even/#categorization","text":"Numbers","title":"Categorization"},{"location":"rules/Even/#changelog","text":"Version Description 1.0.0 Created See also: Multiple Odd","title":"Changelog"},{"location":"rules/Executable/","text":"Executable Executable() Validates if a file is an executable. v . executable () . validate ( 'script.sh' ) # true Categorization File system Changelog Version Description 1.0.0 Created See also: Directory Exists Extension File Image Mimetype Readable Size SymbolicLink Writable","title":"Executable"},{"location":"rules/Executable/#executable","text":"Executable() Validates if a file is an executable. v . executable () . validate ( 'script.sh' ) # true","title":"Executable"},{"location":"rules/Executable/#categorization","text":"File system","title":"Categorization"},{"location":"rules/Executable/#changelog","text":"Version Description 1.0.0 Created See also: Directory Exists Extension File Image Mimetype Readable Size SymbolicLink Writable","title":"Changelog"},{"location":"rules/Exists/","text":"Exists Exists() Validates files or directories. v . exists () . validate ( __file__ ) # true v . exists () . validate ( 'script.sh' ) # true Categorization File system Changelog Version Description 1.0.0 Created See also: Directory Executable Extension File Image Mimetype Readable Size SymbolicLink Writable","title":"Exists"},{"location":"rules/Exists/#exists","text":"Exists() Validates files or directories. v . exists () . validate ( __file__ ) # true v . exists () . validate ( 'script.sh' ) # true","title":"Exists"},{"location":"rules/Exists/#categorization","text":"File system","title":"Categorization"},{"location":"rules/Exists/#changelog","text":"Version Description 1.0.0 Created See also: Directory Executable Extension File Image Mimetype Readable Size SymbolicLink Writable","title":"Changelog"},{"location":"rules/Extension/","text":"Extension Extension(extension: str) Validates if the file extension matches the expected one: v . extension ( 'png' ) . validate ( 'image.png' ) # true This rule is case-sensitive. Categorization File system Changelog Version Description 1.0.0 Created See also: Directory Executable Exists File Image Mimetype Readable Size SymbolicLink Writable","title":"Extension"},{"location":"rules/Extension/#extension","text":"Extension(extension: str) Validates if the file extension matches the expected one: v . extension ( 'png' ) . validate ( 'image.png' ) # true This rule is case-sensitive.","title":"Extension"},{"location":"rules/Extension/#categorization","text":"File system","title":"Categorization"},{"location":"rules/Extension/#changelog","text":"Version Description 1.0.0 Created See also: Directory Executable Exists File Image Mimetype Readable Size SymbolicLink Writable","title":"Changelog"},{"location":"rules/Factor/","text":"Factor Factor(dividend: int) Validates if the input is a factor of the defined dividend. v . factor ( 0 ) . validate ( 5 ) # true v . factor ( 4 ) . validate ( 2 ) # true v . factor ( 4 ) . validate ( 3 ) # false Categorization Math Numbers Changelog Version Description 1.0.0 Created See also: Decimal Digit Finite Infinite NumericVal PerfectSquare PrimeNumber","title":"Factor"},{"location":"rules/Factor/#factor","text":"Factor(dividend: int) Validates if the input is a factor of the defined dividend. v . factor ( 0 ) . validate ( 5 ) # true v . factor ( 4 ) . validate ( 2 ) # true v . factor ( 4 ) . validate ( 3 ) # false","title":"Factor"},{"location":"rules/Factor/#categorization","text":"Math Numbers","title":"Categorization"},{"location":"rules/Factor/#changelog","text":"Version Description 1.0.0 Created See also: Decimal Digit Finite Infinite NumericVal PerfectSquare PrimeNumber","title":"Changelog"},{"location":"rules/FalseVal/","text":"FalseVal FalseVal() Validates if a value is considered as False . v . falseVal () . validate ( False ) # true v . falseVal () . validate ( 0 ) # true v . falseVal () . validate ( '0' ) # true v . falseVal () . validate ( 'false' ) # true v . falseVal () . validate ( 'off' ) # true v . falseVal () . validate ( 'no' ) # true v . falseVal () . validate ( '0.5' ) # false v . falseVal () . validate ( '2' ) # false Categorization Booleans Changelog Version Description 1.0.0 Created See also: TrueVal","title":"FalseVal"},{"location":"rules/FalseVal/#falseval","text":"FalseVal() Validates if a value is considered as False . v . falseVal () . validate ( False ) # true v . falseVal () . validate ( 0 ) # true v . falseVal () . validate ( '0' ) # true v . falseVal () . validate ( 'false' ) # true v . falseVal () . validate ( 'off' ) # true v . falseVal () . validate ( 'no' ) # true v . falseVal () . validate ( '0.5' ) # false v . falseVal () . validate ( '2' ) # false","title":"FalseVal"},{"location":"rules/FalseVal/#categorization","text":"Booleans","title":"Categorization"},{"location":"rules/FalseVal/#changelog","text":"Version Description 1.0.0 Created See also: TrueVal","title":"Changelog"},{"location":"rules/Fibonacci/","text":"Fibonacci Fibonacci() Validates whether the input follows the Fibonacci integer sequence. v . fibonacci () . validate ( 1 ) # true v . fibonacci () . validate ( '34' ) # true v . fibonacci () . validate ( 6 ) # false Categorization Math Numbers Changelog Version Description 1.0.0 Created See also: PerfectSquare PrimeNumber","title":"Fibonacci"},{"location":"rules/Fibonacci/#fibonacci","text":"Fibonacci() Validates whether the input follows the Fibonacci integer sequence. v . fibonacci () . validate ( 1 ) # true v . fibonacci () . validate ( '34' ) # true v . fibonacci () . validate ( 6 ) # false","title":"Fibonacci"},{"location":"rules/Fibonacci/#categorization","text":"Math Numbers","title":"Categorization"},{"location":"rules/Fibonacci/#changelog","text":"Version Description 1.0.0 Created See also: PerfectSquare PrimeNumber","title":"Changelog"},{"location":"rules/File/","text":"File File() Validates whether file input is as a regular filename. v . file () . validate ( __file__ ) # true v . file () . validate ( '/tmp' ) # false Categorization File system Changelog Version Description 1.0.0 Created See also: Directory Executable Exists Extension Image Mimetype Readable Size SymbolicLink Writable","title":"File"},{"location":"rules/File/#file","text":"File() Validates whether file input is as a regular filename. v . file () . validate ( __file__ ) # true v . file () . validate ( '/tmp' ) # false","title":"File"},{"location":"rules/File/#categorization","text":"File system","title":"Categorization"},{"location":"rules/File/#changelog","text":"Version Description 1.0.0 Created See also: Directory Executable Exists Extension Image Mimetype Readable Size SymbolicLink Writable","title":"Changelog"},{"location":"rules/Finite/","text":"Finite Finite() Validates if the input is a finite number. import math v . finite () . validate ( '10' ) # true v . finite () . validate ( 10 ) # true v . finite () . validate ( math . inf ) # false Categorization Math Numbers Changelog Version Description 1.0.0 Created See also: Decimal Digit Factor Infinite IntType IntVal NumericVal Type","title":"Finite"},{"location":"rules/Finite/#finite","text":"Finite() Validates if the input is a finite number. import math v . finite () . validate ( '10' ) # true v . finite () . validate ( 10 ) # true v . finite () . validate ( math . inf ) # false","title":"Finite"},{"location":"rules/Finite/#categorization","text":"Math Numbers","title":"Categorization"},{"location":"rules/Finite/#changelog","text":"Version Description 1.0.0 Created See also: Decimal Digit Factor Infinite IntType IntVal NumericVal Type","title":"Changelog"},{"location":"rules/FloatType/","text":"FloatType FloatType() Validates whether the type of the input is float. v . floatType () . validate ( 1.5 ) # true v . floatType () . validate ( '1.5' ) # false v . floatType () . validate ( 0e5 ) # true Categorization Numbers Types Changelog Version Description 1.0.0 Created See also: ListType BoolType BoolVal CallableType FloatVal IntType IntVal NoneType Number NumericVal StringType StringVal Type","title":"FloatType"},{"location":"rules/FloatType/#floattype","text":"FloatType() Validates whether the type of the input is float. v . floatType () . validate ( 1.5 ) # true v . floatType () . validate ( '1.5' ) # false v . floatType () . validate ( 0e5 ) # true","title":"FloatType"},{"location":"rules/FloatType/#categorization","text":"Numbers Types","title":"Categorization"},{"location":"rules/FloatType/#changelog","text":"Version Description 1.0.0 Created See also: ListType BoolType BoolVal CallableType FloatVal IntType IntVal NoneType Number NumericVal StringType StringVal Type","title":"Changelog"},{"location":"rules/FloatVal/","text":"FloatVal FloatVal() Validate whether the input value is float. v . floatVal () . validate ( 1.5 ) # true v . floatVal () . validate ( '1.5' ) # true v . floatVal () . validate ( '1e5' ) # true Categorization Numbers Types Changelog Version Description 1.0.0 Created See also: BoolType BoolVal FloatType IntType IntVal Type","title":"FloatVal"},{"location":"rules/FloatVal/#floatval","text":"FloatVal() Validate whether the input value is float. v . floatVal () . validate ( 1.5 ) # true v . floatVal () . validate ( '1.5' ) # true v . floatVal () . validate ( '1e5' ) # true","title":"FloatVal"},{"location":"rules/FloatVal/#categorization","text":"Numbers Types","title":"Categorization"},{"location":"rules/FloatVal/#changelog","text":"Version Description 1.0.0 Created See also: BoolType BoolVal FloatType IntType IntVal Type","title":"Changelog"},{"location":"rules/GreaterThan/","text":"GreaterThan GreaterThan(compare_to: Any) Validates whether the input is greater than a value. v . greaterThan ( 10 ) . validate ( 11 ) # true v . greaterThan ( 10 ) . validate ( 9 ) # false Validation makes comparison easier, check out our supported comparable values . Message template for this validator includes {compare_to} . Categorization Comparisons Changelog Version Description 1.0.0 Created See also: Between Max Min","title":"GreaterThan"},{"location":"rules/GreaterThan/#greaterthan","text":"GreaterThan(compare_to: Any) Validates whether the input is greater than a value. v . greaterThan ( 10 ) . validate ( 11 ) # true v . greaterThan ( 10 ) . validate ( 9 ) # false Validation makes comparison easier, check out our supported comparable values . Message template for this validator includes {compare_to} .","title":"GreaterThan"},{"location":"rules/GreaterThan/#categorization","text":"Comparisons","title":"Categorization"},{"location":"rules/GreaterThan/#changelog","text":"Version Description 1.0.0 Created See also: Between Max Min","title":"Changelog"},{"location":"rules/HexRgbColor/","text":"HexRgbColor HexRgbColor() Validates weather the input is a hex RGB color or not. v . hexRgbColor () . validate ( '#FFFAAA' ) # true v . hexRgbColor () . validate ( '#ff6600' ) # true v . hexRgbColor () . validate ( '123123' ) # true v . hexRgbColor () . validate ( 'FCD' ) # true Categorization Strings Changelog Version Description 1.0.0 Created See also: CreditCard PostalCode Regex","title":"HexRgbColor"},{"location":"rules/HexRgbColor/#hexrgbcolor","text":"HexRgbColor() Validates weather the input is a hex RGB color or not. v . hexRgbColor () . validate ( '#FFFAAA' ) # true v . hexRgbColor () . validate ( '#ff6600' ) # true v . hexRgbColor () . validate ( '123123' ) # true v . hexRgbColor () . validate ( 'FCD' ) # true","title":"HexRgbColor"},{"location":"rules/HexRgbColor/#categorization","text":"Strings","title":"Categorization"},{"location":"rules/HexRgbColor/#changelog","text":"Version Description 1.0.0 Created See also: CreditCard PostalCode Regex","title":"Changelog"},{"location":"rules/Iban/","text":"Iban Iban() Validates whether the input is a valid IBAN (International Bank Account Number) or not. v . iban () . validate ( 'SE35 5000 0000 0549 1000 0003' ) # true v . iban () . validate ( 'ch9300762011623852957' ) # true v . iban () . validate ( 'ZZ32 5000 5880 7742' ) # false v . iban () . validate ( 123456789 ) # false v . iban () . validate ( '' ) # false Categorization Banking Changelog Version Description 1.0.0 Created See also: CreditCard MacAddress PostalCode","title":"Iban"},{"location":"rules/Iban/#iban","text":"Iban() Validates whether the input is a valid IBAN (International Bank Account Number) or not. v . iban () . validate ( 'SE35 5000 0000 0549 1000 0003' ) # true v . iban () . validate ( 'ch9300762011623852957' ) # true v . iban () . validate ( 'ZZ32 5000 5880 7742' ) # false v . iban () . validate ( 123456789 ) # false v . iban () . validate ( '' ) # false","title":"Iban"},{"location":"rules/Iban/#categorization","text":"Banking","title":"Categorization"},{"location":"rules/Iban/#changelog","text":"Version Description 1.0.0 Created See also: CreditCard MacAddress PostalCode","title":"Changelog"},{"location":"rules/Identical/","text":"Identical Identical(compare_to: Any) Validates if the input is identical to some value - it should be equal and has the same type. v . identical ( 42 ) . validate ( 42 ) # true v . identical ( 42 ) . validate ( '42' ) # false Message template for this validator includes {compare_to} . Categorization Comparisons Changelog Version Description 1.0.0 Created See also: Contains Equals Equivalent","title":"Identical"},{"location":"rules/Identical/#identical","text":"Identical(compare_to: Any) Validates if the input is identical to some value - it should be equal and has the same type. v . identical ( 42 ) . validate ( 42 ) # true v . identical ( 42 ) . validate ( '42' ) # false Message template for this validator includes {compare_to} .","title":"Identical"},{"location":"rules/Identical/#categorization","text":"Comparisons","title":"Categorization"},{"location":"rules/Identical/#changelog","text":"Version Description 1.0.0 Created See also: Contains Equals Equivalent","title":"Changelog"},{"location":"rules/Image/","text":"Image Image() Validates if the file is a valid image by checking its MIME type. v . image () . validate ( 'image.gif' ) # true v . image () . validate ( 'image.jpg' ) # true v . image () . validate ( 'image.png' ) # true Categorization File system Changelog Version Description 1.0.0 Created See also: Directory Executable Exists Extension File Mimetype Readable Size SymbolicLink Writable","title":"Image"},{"location":"rules/Image/#image","text":"Image() Validates if the file is a valid image by checking its MIME type. v . image () . validate ( 'image.gif' ) # true v . image () . validate ( 'image.jpg' ) # true v . image () . validate ( 'image.png' ) # true","title":"Image"},{"location":"rules/Image/#categorization","text":"File system","title":"Categorization"},{"location":"rules/Image/#changelog","text":"Version Description 1.0.0 Created See also: Directory Executable Exists Extension File Mimetype Readable Size SymbolicLink Writable","title":"Changelog"},{"location":"rules/Imei/","text":"Imei Imei() Validates is the input is a valid IMEI . v . imei () . validate ( '35-209900-176148-1' ) # true v . imei () . validate ( '490154203237518' ) # true Categorization Identifications Changelog Version Description 1.0.0 Created See also: Bsn Cnh Cnpj Cpf Luhn","title":"Imei"},{"location":"rules/Imei/#imei","text":"Imei() Validates is the input is a valid IMEI . v . imei () . validate ( '35-209900-176148-1' ) # true v . imei () . validate ( '490154203237518' ) # true","title":"Imei"},{"location":"rules/Imei/#categorization","text":"Identifications","title":"Categorization"},{"location":"rules/Imei/#changelog","text":"Version Description 1.0.0 Created See also: Bsn Cnh Cnpj Cpf Luhn","title":"Changelog"},{"location":"rules/Include/","text":"Include Include(haystack: Union[str, List[Any], Tuple[Any]], identical: bool = True) Validates if an input contains a specific haystack. For strings: v . include ( 'lorem ipsum' ) . validate ( 'ipsum' ) # true For lists: v . include ([ 'lorem' , 'ipsum' ]) . validate ( 'lorem' ) # true A second parameter may be passed for comparison case-sensitive strings (default True). Message template for this validator includes {haystack} . Categorization Arrays Comparisons Strings Changelog Version Description 1.0.0 Created See also: Contains ContainsAny EndsWith Roman StartsWith","title":"Include"},{"location":"rules/Include/#include","text":"Include(haystack: Union[str, List[Any], Tuple[Any]], identical: bool = True) Validates if an input contains a specific haystack. For strings: v . include ( 'lorem ipsum' ) . validate ( 'ipsum' ) # true For lists: v . include ([ 'lorem' , 'ipsum' ]) . validate ( 'lorem' ) # true A second parameter may be passed for comparison case-sensitive strings (default True). Message template for this validator includes {haystack} .","title":"Include"},{"location":"rules/Include/#categorization","text":"Arrays Comparisons Strings","title":"Categorization"},{"location":"rules/Include/#changelog","text":"Version Description 1.0.0 Created See also: Contains ContainsAny EndsWith Roman StartsWith","title":"Changelog"},{"location":"rules/Infinite/","text":"Infinite Infinite() Validates if the input is an infinite number. import math v . infinite () . validate ( math . inf ) # true Categorization Math Numbers Changelog Version Description 1.0.0 Created See also: Decimal Digit Factor Finite IntType IntVal NumericVal Type","title":"Infinite"},{"location":"rules/Infinite/#infinite","text":"Infinite() Validates if the input is an infinite number. import math v . infinite () . validate ( math . inf ) # true","title":"Infinite"},{"location":"rules/Infinite/#categorization","text":"Math Numbers","title":"Categorization"},{"location":"rules/Infinite/#changelog","text":"Version Description 1.0.0 Created See also: Decimal Digit Factor Finite IntType IntVal NumericVal Type","title":"Changelog"},{"location":"rules/Instance/","text":"Instance Instance(instance_name: str) Validates if the input is an instance of the given class (it doesn't check inheritance). from datetime import datetime v . instance ( 'datetime' ) . validate ( datetime . today ()) # true v . instance ( 'list' ) . validate ([ 1 , 2 , 3 ]) # true Message template for this validator includes {instance_name} . Categorization Objects Changelog Version Description 1.0.0 Created See also: Countable Iterable Type","title":"Instance"},{"location":"rules/Instance/#instance","text":"Instance(instance_name: str) Validates if the input is an instance of the given class (it doesn't check inheritance). from datetime import datetime v . instance ( 'datetime' ) . validate ( datetime . today ()) # true v . instance ( 'list' ) . validate ([ 1 , 2 , 3 ]) # true Message template for this validator includes {instance_name} .","title":"Instance"},{"location":"rules/Instance/#categorization","text":"Objects","title":"Categorization"},{"location":"rules/Instance/#changelog","text":"Version Description 1.0.0 Created See also: Countable Iterable Type","title":"Changelog"},{"location":"rules/IntType/","text":"IntType IntType() Validates whether the type of the input is integer (int type). v . intType () . validate ( 42 ) # true v . intType () . validate ( '10' ) # false Categorization Numbers Types Changelog Version Description 1.0.0 Created See also: ListType BoolType BoolVal CallableType Decimal Digit Finite FloatType FloatVal Infinite IntVal NoneType Number NumericVal StringType StringVal Type","title":"IntType"},{"location":"rules/IntType/#inttype","text":"IntType() Validates whether the type of the input is integer (int type). v . intType () . validate ( 42 ) # true v . intType () . validate ( '10' ) # false","title":"IntType"},{"location":"rules/IntType/#categorization","text":"Numbers Types","title":"Categorization"},{"location":"rules/IntType/#changelog","text":"Version Description 1.0.0 Created See also: ListType BoolType BoolVal CallableType Decimal Digit Finite FloatType FloatVal Infinite IntVal NoneType Number NumericVal StringType StringVal Type","title":"Changelog"},{"location":"rules/IntVal/","text":"IntVal IntVal() Validates if the input is an integer, allowing leading zeros and other number bases. v . intVal () . validate ( '10' ) # true v . intVal () . validate ( '089' ) # true v . intVal () . validate ( 10 ) # true v . intVal () . validate ( 0b101010 ) # true v . intVal () . validate ( 0x2a ) # true This rule will consider as valid any input that has type int or is string which return True for method isdigit . True and False have int type then validation will be passed. v . intVal () . validate ( True ) # True v . intVal () . validate ( '89a' ) # false Categorization Numbers Types Changelog Version Description 1.0.0 Created See also: Decimal Digit Finite FloatType FloatVal Infinite IntType NumericVal Type","title":"IntVal"},{"location":"rules/IntVal/#intval","text":"IntVal() Validates if the input is an integer, allowing leading zeros and other number bases. v . intVal () . validate ( '10' ) # true v . intVal () . validate ( '089' ) # true v . intVal () . validate ( 10 ) # true v . intVal () . validate ( 0b101010 ) # true v . intVal () . validate ( 0x2a ) # true This rule will consider as valid any input that has type int or is string which return True for method isdigit . True and False have int type then validation will be passed. v . intVal () . validate ( True ) # True v . intVal () . validate ( '89a' ) # false","title":"IntVal"},{"location":"rules/IntVal/#categorization","text":"Numbers Types","title":"Categorization"},{"location":"rules/IntVal/#changelog","text":"Version Description 1.0.0 Created See also: Decimal Digit Finite FloatType FloatVal Infinite IntType NumericVal Type","title":"Changelog"},{"location":"rules/Ip/","text":"Ip Ip(range: str = '*', private: bool = False) Validates whether the input is a valid IP address. This validator uses the library ipaddress . v . ip () . validate ( '127.0.0.1' ) # true v . ip ( '192.168.100.100-192.168.200.200' ) . validate ( '192.168.150.150' ) # true v . ip ( '220.78.168.0/21' ) . validate ( '220.78.173.2' ) # true v . ip ( '220.78.168.0/21' ) . validate ( '220.78.176.2' ) # false If you want to validate private ip addresses, please add private=True : v . ip ( private = True ) . validate ( '10.1.1.1' ) # true v . ip ( '*' , True ) . validate ( '172.16.2.2' ) # true v . ip ( '*' , True ) . validate ( '2.2.2.2' ) # false Categorization Internet Changelog Version Description 1.0.0 Created See also: Domain MacAddress Tld","title":"Ip"},{"location":"rules/Ip/#ip","text":"Ip(range: str = '*', private: bool = False) Validates whether the input is a valid IP address. This validator uses the library ipaddress . v . ip () . validate ( '127.0.0.1' ) # true v . ip ( '192.168.100.100-192.168.200.200' ) . validate ( '192.168.150.150' ) # true v . ip ( '220.78.168.0/21' ) . validate ( '220.78.173.2' ) # true v . ip ( '220.78.168.0/21' ) . validate ( '220.78.176.2' ) # false If you want to validate private ip addresses, please add private=True : v . ip ( private = True ) . validate ( '10.1.1.1' ) # true v . ip ( '*' , True ) . validate ( '172.16.2.2' ) # true v . ip ( '*' , True ) . validate ( '2.2.2.2' ) # false","title":"Ip"},{"location":"rules/Ip/#categorization","text":"Internet","title":"Categorization"},{"location":"rules/Ip/#changelog","text":"Version Description 1.0.0 Created See also: Domain MacAddress Tld","title":"Changelog"},{"location":"rules/Isbn/","text":"Isbn Isbn() Validates whether the input is a valid ISBN or not. v . isbn () . validate ( 'ISBN-13: 978-0-596-52068-7' ) # true v . isbn () . validate ( '978 0 596 52068 7' ) # true v . isbn () . validate ( 'ISBN-12: 978-0-596-52068-7' ) # false v . isbn () . validate ( '978 10 596 52068 7' ) # false Categorization Identifications Changelog Version Description 1.0.0 Created See also: Imei Luhn","title":"Isbn"},{"location":"rules/Isbn/#isbn","text":"Isbn() Validates whether the input is a valid ISBN or not. v . isbn () . validate ( 'ISBN-13: 978-0-596-52068-7' ) # true v . isbn () . validate ( '978 0 596 52068 7' ) # true v . isbn () . validate ( 'ISBN-12: 978-0-596-52068-7' ) # false v . isbn () . validate ( '978 10 596 52068 7' ) # false","title":"Isbn"},{"location":"rules/Isbn/#categorization","text":"Identifications","title":"Categorization"},{"location":"rules/Isbn/#changelog","text":"Version Description 1.0.0 Created See also: Imei Luhn","title":"Changelog"},{"location":"rules/Iterable/","text":"Iterable Iterable() Validates whether an input has attribute __iter__ . v . iterable () . validate ([]) # true v . iterable () . validate ( range ( 1 )) # true v . iterable () . validate ( dict ()) # true v . iterable () . validate ( 'string' ) # true v . iterable () . validate ( 12 ) # false Categorization Types Changelog Version Description 1.0.0 Created See also: ListType Countable Each Instance","title":"Iterable"},{"location":"rules/Iterable/#iterable","text":"Iterable() Validates whether an input has attribute __iter__ . v . iterable () . validate ([]) # true v . iterable () . validate ( range ( 1 )) # true v . iterable () . validate ( dict ()) # true v . iterable () . validate ( 'string' ) # true v . iterable () . validate ( 12 ) # false","title":"Iterable"},{"location":"rules/Iterable/#categorization","text":"Types","title":"Categorization"},{"location":"rules/Iterable/#changelog","text":"Version Description 1.0.0 Created See also: ListType Countable Each Instance","title":"Changelog"},{"location":"rules/Json/","text":"Json Json() Validates if the given input is a valid JSON. v . json () . validate ( '{\"foo\":\"bar\"}' ) # true Categorization Strings Changelog Version Description 1.0.0 Created See also: Domain Email Phone VideoUrl","title":"Json"},{"location":"rules/Json/#json","text":"Json() Validates if the given input is a valid JSON. v . json () . validate ( '{\"foo\":\"bar\"}' ) # true","title":"Json"},{"location":"rules/Json/#categorization","text":"Strings","title":"Categorization"},{"location":"rules/Json/#changelog","text":"Version Description 1.0.0 Created See also: Domain Email Phone VideoUrl","title":"Changelog"},{"location":"rules/Key/","text":"Key Key(reference: str, rule=None, mandatory: bool = True) Validates an array key. test_dict = { 'foo' : 'bar' } v . key ( 'foo' ) . validate ( test_dict ) # true You can also validate the key value itself: v . key ( 'foo' , v . equals ( 'bar' )) . validate ( test_dict ) # true Third parameter makes the key presence optional: v . key ( 'lorem' , v . stringType ()) . validate ( test_dict ) # false v . key ( 'lorem' , v . stringType (), False ) . validate ( test_dict ) # true The name of this validator is automatically set to the key name. Categorization Arrays Nesting Structures Changelog Version Description 1.0.0 Created See also: Attribute Each KeySet KeyValue","title":"Key"},{"location":"rules/Key/#key","text":"Key(reference: str, rule=None, mandatory: bool = True) Validates an array key. test_dict = { 'foo' : 'bar' } v . key ( 'foo' ) . validate ( test_dict ) # true You can also validate the key value itself: v . key ( 'foo' , v . equals ( 'bar' )) . validate ( test_dict ) # true Third parameter makes the key presence optional: v . key ( 'lorem' , v . stringType ()) . validate ( test_dict ) # false v . key ( 'lorem' , v . stringType (), False ) . validate ( test_dict ) # true The name of this validator is automatically set to the key name.","title":"Key"},{"location":"rules/Key/#categorization","text":"Arrays Nesting Structures","title":"Categorization"},{"location":"rules/Key/#changelog","text":"Version Description 1.0.0 Created See also: Attribute Each KeySet KeyValue","title":"Changelog"},{"location":"rules/KeySet/","text":"KeySet KeySet(*keys: Key) Validates a keys in a defined structure. test_dict = { 'foo' : 42 } v . keySet ( v . key ( 'foo' , v . intVal ()) ) . validate ( test_dict ) # true Extra keys are not allowed: test_dict = { 'foo' : 42 , 'bar' : 'String' } v . keySet ( v . key ( 'foo' , v . intVal ()) ) . validate ( test_dict ) # false Missing required keys are not allowed: test_dict = { 'foo' : 42 , 'bar' : 'String' } v . keySet ( v . key ( 'foo' , v . intVal ()), v . key ( 'bar' , v . stringType ()), v . key ( 'baz' , v . boolType ()) ) . validate ( test_dict ) # false Missing non-required keys are allowed: test_dict = { 'foo' : 42 , 'bar' : 'String' } v . keySet ( v . key ( 'foo' , v . intVal ()), v . key ( 'bar' , v . stringType ()), v . key ( 'baz' , v . boolType (), False ) ) . validate ( test_dict ) # true The keys order is not considered in the validation. Categorization Arrays Nesting Structures Changelog Version Description 1.0.0 Created See also: Key KeyValue","title":"KeySet"},{"location":"rules/KeySet/#keyset","text":"KeySet(*keys: Key) Validates a keys in a defined structure. test_dict = { 'foo' : 42 } v . keySet ( v . key ( 'foo' , v . intVal ()) ) . validate ( test_dict ) # true Extra keys are not allowed: test_dict = { 'foo' : 42 , 'bar' : 'String' } v . keySet ( v . key ( 'foo' , v . intVal ()) ) . validate ( test_dict ) # false Missing required keys are not allowed: test_dict = { 'foo' : 42 , 'bar' : 'String' } v . keySet ( v . key ( 'foo' , v . intVal ()), v . key ( 'bar' , v . stringType ()), v . key ( 'baz' , v . boolType ()) ) . validate ( test_dict ) # false Missing non-required keys are allowed: test_dict = { 'foo' : 42 , 'bar' : 'String' } v . keySet ( v . key ( 'foo' , v . intVal ()), v . key ( 'bar' , v . stringType ()), v . key ( 'baz' , v . boolType (), False ) ) . validate ( test_dict ) # true The keys order is not considered in the validation.","title":"KeySet"},{"location":"rules/KeySet/#categorization","text":"Arrays Nesting Structures","title":"Categorization"},{"location":"rules/KeySet/#changelog","text":"Version Description 1.0.0 Created See also: Key KeyValue","title":"Changelog"},{"location":"rules/KeyValue/","text":"KeyValue keyValue(compared_key: str, rule_name: str, base_key: str) Performs validation of compared_key using the rule named on rule_name with base_key as base. Sometimes, when validating arrays, the validation of a key value depends on another key value and that may cause some ugly code since you need the input before the validation, making some checking manually: data = { 'password' : 'qwerty' , 'password_confirmation' : 'qwerty' } v . key ( 'password' , v . notEmpty ()) . validate ( data ) v . key ( 'password_confirmation' , v . equals ( data . get ( 'password' , None ))) . validate ( data ) The problem with the above code is because you do not know if password is a valid key, so you must check it manually before performing the validation on password_confirmation . The keyValue() rule makes this job easier by creating a rule named on rule_name passing base_key as the first argument of this rule, see an example: v . keyValue ( 'password_confirmation' , 'equals' , 'password' ) . validate ( data ) The above code will result on True if data['password_confirmation'] is equals to data['password'] . This rule will invalidate the input if compared_key or base_key don't exist, or if the rule named on rule_name could not be created (or don't exist). When using claim() or check() methods and the rule do not pass, it overwrites all values in the validation exceptions with base_key and compared_key . data = { 'password' : 'qwerty123123' , 'password_confirmation' : 'qwerty' } try : v . keyValue ( 'password_confirmation' , 'equals' , 'password' ) . check ( data ) except ValidationException as exception : print ( exception ) The above code may generate the message: password_confirmation must be equal to password Categorization Arrays Nesting Changelog Version Description 1.0.0 Created See also: Equals Key KeySet","title":"KeyValue"},{"location":"rules/KeyValue/#keyvalue","text":"keyValue(compared_key: str, rule_name: str, base_key: str) Performs validation of compared_key using the rule named on rule_name with base_key as base. Sometimes, when validating arrays, the validation of a key value depends on another key value and that may cause some ugly code since you need the input before the validation, making some checking manually: data = { 'password' : 'qwerty' , 'password_confirmation' : 'qwerty' } v . key ( 'password' , v . notEmpty ()) . validate ( data ) v . key ( 'password_confirmation' , v . equals ( data . get ( 'password' , None ))) . validate ( data ) The problem with the above code is because you do not know if password is a valid key, so you must check it manually before performing the validation on password_confirmation . The keyValue() rule makes this job easier by creating a rule named on rule_name passing base_key as the first argument of this rule, see an example: v . keyValue ( 'password_confirmation' , 'equals' , 'password' ) . validate ( data ) The above code will result on True if data['password_confirmation'] is equals to data['password'] . This rule will invalidate the input if compared_key or base_key don't exist, or if the rule named on rule_name could not be created (or don't exist). When using claim() or check() methods and the rule do not pass, it overwrites all values in the validation exceptions with base_key and compared_key . data = { 'password' : 'qwerty123123' , 'password_confirmation' : 'qwerty' } try : v . keyValue ( 'password_confirmation' , 'equals' , 'password' ) . check ( data ) except ValidationException as exception : print ( exception ) The above code may generate the message: password_confirmation must be equal to password","title":"KeyValue"},{"location":"rules/KeyValue/#categorization","text":"Arrays Nesting","title":"Categorization"},{"location":"rules/KeyValue/#changelog","text":"Version Description 1.0.0 Created See also: Equals Key KeySet","title":"Changelog"},{"location":"rules/LanguageCode/","text":"LanguageCode LanguageCode(code_set: str = 'alpha-2') Validates whether the input is language code based on ISO 639. v . languageCode () . validate ( 'pt' ) # true v . languageCode () . validate ( 'en' ) # true v . languageCode () . validate ( 'it' ) # true v . languageCode ( 'alpha-3' ) . validate ( 'ita' ) # true v . languageCode ( 'alpha-3' ) . validate ( 'eng' ) # true You can choose code_set between alpha-2 and alpha-3 ; alpha-2 is set by default. This rule uses library pycountry . Categorization ISO codes Localization Changelog Version Description 1.0.0 Created See also: CountryCode","title":"LanguageCode"},{"location":"rules/LanguageCode/#languagecode","text":"LanguageCode(code_set: str = 'alpha-2') Validates whether the input is language code based on ISO 639. v . languageCode () . validate ( 'pt' ) # true v . languageCode () . validate ( 'en' ) # true v . languageCode () . validate ( 'it' ) # true v . languageCode ( 'alpha-3' ) . validate ( 'ita' ) # true v . languageCode ( 'alpha-3' ) . validate ( 'eng' ) # true You can choose code_set between alpha-2 and alpha-3 ; alpha-2 is set by default. This rule uses library pycountry .","title":"LanguageCode"},{"location":"rules/LanguageCode/#categorization","text":"ISO codes Localization","title":"Categorization"},{"location":"rules/LanguageCode/#changelog","text":"Version Description 1.0.0 Created See also: CountryCode","title":"Changelog"},{"location":"rules/LeapDate/","text":"LeapDate LeapDate(date_format: str = \"%Y-%m-%d\") Validates if a date is leap. v . leapDate ( '%Y-%m- %d ' ) . validate ( '1988-02-29' ) # true This validator accepts datetime instances as well. The date_format parameter is mandatory (by default, it is %Y-%m-%d ). Categorization Date and Time Changelog Version Description 1.0.0 Created See also: Date DateTime LeapYear Time","title":"LeapDate"},{"location":"rules/LeapDate/#leapdate","text":"LeapDate(date_format: str = \"%Y-%m-%d\") Validates if a date is leap. v . leapDate ( '%Y-%m- %d ' ) . validate ( '1988-02-29' ) # true This validator accepts datetime instances as well. The date_format parameter is mandatory (by default, it is %Y-%m-%d ).","title":"LeapDate"},{"location":"rules/LeapDate/#categorization","text":"Date and Time","title":"Categorization"},{"location":"rules/LeapDate/#changelog","text":"Version Description 1.0.0 Created See also: Date DateTime LeapYear Time","title":"Changelog"},{"location":"rules/LeapYear/","text":"LeapYear LeapYear() Validates if a year is leap. v . leapYear () . validate ( '1988' ) # true This validator accepts datetime instances as well. Categorization Date and Time Changelog Version Description 1.0.0 Created See also: Date DateTime LeapDate Time","title":"LeapYear"},{"location":"rules/LeapYear/#leapyear","text":"LeapYear() Validates if a year is leap. v . leapYear () . validate ( '1988' ) # true This validator accepts datetime instances as well.","title":"LeapYear"},{"location":"rules/LeapYear/#categorization","text":"Date and Time","title":"Categorization"},{"location":"rules/LeapYear/#changelog","text":"Version Description 1.0.0 Created See also: Date DateTime LeapDate Time","title":"Changelog"},{"location":"rules/Length/","text":"Length Length(min_value: Optional[int] = None, max_value: Optional[int] = None, inclusive: bool = True) Validates the length of the given input. Most simple example: v . stringType () . length ( 1 , 5 ) . validate ( 'abc' ) # true You can also validate only minimum length: v . stringType () . length ( 5 , None ) . validate ( 'abcdef' ) # true v . stringType () . length ( 5 ) . validate ( 'abcdef' ) # true v . stringType () . length ( min_value = 5 ) . validate ( 'abcdef' ) # true Only maximum length: v . stringType () . length ( None , 5 ) . validate ( 'abc' ) # true v . stringType () . length ( max_value = 5 ) . validate ( 'abc' ) # true The type as the first validator in a chain is a good practice, since length accepts many types: v . listType () . length ( 1 , 5 ) . validate ([ 'foo' , 'bar' ]) # true A third parameter may be passed to validate the passed values inclusive: v . stringType () . length ( 1 , 5 , True ) . validate ( 'a' ) # true v . stringType () . length ( 1 , 5 , False ) . validate ( 'a' ) # false Message template for this validator includes {min_value} and {max_value} . Changelog Version Description 1.0.0 Created See also: Between Min","title":"Length"},{"location":"rules/Length/#length","text":"Length(min_value: Optional[int] = None, max_value: Optional[int] = None, inclusive: bool = True) Validates the length of the given input. Most simple example: v . stringType () . length ( 1 , 5 ) . validate ( 'abc' ) # true You can also validate only minimum length: v . stringType () . length ( 5 , None ) . validate ( 'abcdef' ) # true v . stringType () . length ( 5 ) . validate ( 'abcdef' ) # true v . stringType () . length ( min_value = 5 ) . validate ( 'abcdef' ) # true Only maximum length: v . stringType () . length ( None , 5 ) . validate ( 'abc' ) # true v . stringType () . length ( max_value = 5 ) . validate ( 'abc' ) # true The type as the first validator in a chain is a good practice, since length accepts many types: v . listType () . length ( 1 , 5 ) . validate ([ 'foo' , 'bar' ]) # true A third parameter may be passed to validate the passed values inclusive: v . stringType () . length ( 1 , 5 , True ) . validate ( 'a' ) # true v . stringType () . length ( 1 , 5 , False ) . validate ( 'a' ) # false Message template for this validator includes {min_value} and {max_value} .","title":"Length"},{"location":"rules/Length/#changelog","text":"Version Description 1.0.0 Created See also: Between Min","title":"Changelog"},{"location":"rules/LessThan/","text":"LessThan LessThan(compare_to: Any) Validates whether the input is less than a value. v . lessThan ( 10 ) . validate ( 9 ) # true v . lessThan ( 10 ) . validate ( 10 ) # false Validation makes comparison easier, check out our supported comparable values . Message template for this validator includes {compare_to} . Categorization Comparisons Changelog Version Description 1.0.0 Created See also: Between Max Min","title":"LessThan"},{"location":"rules/LessThan/#lessthan","text":"LessThan(compare_to: Any) Validates whether the input is less than a value. v . lessThan ( 10 ) . validate ( 9 ) # true v . lessThan ( 10 ) . validate ( 10 ) # false Validation makes comparison easier, check out our supported comparable values . Message template for this validator includes {compare_to} .","title":"LessThan"},{"location":"rules/LessThan/#categorization","text":"Comparisons","title":"Categorization"},{"location":"rules/LessThan/#changelog","text":"Version Description 1.0.0 Created See also: Between Max Min","title":"Changelog"},{"location":"rules/ListType/","text":"ListType ListType() Validates whether the type of an input is list. v . listType () . validate ([]) # true v . listType () . validate ([ 1 , 2 , 3 ]) # true v . listType () . validate ( 'Am I list?' ) # false Categorization Lists Types Changelog Version Description 1.0.0 Created See also: BoolType CallableType DictType Countable FloatType IntType Iterable NoneType StringType Subset Type Unique","title":"ListType"},{"location":"rules/ListType/#listtype","text":"ListType() Validates whether the type of an input is list. v . listType () . validate ([]) # true v . listType () . validate ([ 1 , 2 , 3 ]) # true v . listType () . validate ( 'Am I list?' ) # false","title":"ListType"},{"location":"rules/ListType/#categorization","text":"Lists Types","title":"Categorization"},{"location":"rules/ListType/#changelog","text":"Version Description 1.0.0 Created See also: BoolType CallableType DictType Countable FloatType IntType Iterable NoneType StringType Subset Type Unique","title":"Changelog"},{"location":"rules/Lowercase/","text":"Lowercase Lowercase() Validates whether the characters in the input are lowercase. v . stringType () . lowercase () . validate ( 'xkcd' ) # true Categorization Strings Changelog Version Description 1.0.0 Created See also: Alnum Alpha Uppercase","title":"Lowercase"},{"location":"rules/Lowercase/#lowercase","text":"Lowercase() Validates whether the characters in the input are lowercase. v . stringType () . lowercase () . validate ( 'xkcd' ) # true","title":"Lowercase"},{"location":"rules/Lowercase/#categorization","text":"Strings","title":"Categorization"},{"location":"rules/Lowercase/#changelog","text":"Version Description 1.0.0 Created See also: Alnum Alpha Uppercase","title":"Changelog"},{"location":"rules/Luhn/","text":"Luhn Luhn() Validate whether a given input is a Luhn number. v . luhn () . validate ( '2222400041240011' ) # true v . luhn () . validate ( 'respect!' ) # false Categorization Identifications Changelog Version Description 1.0.0 Created See also: CreditCard Imei Isbn","title":"Luhn"},{"location":"rules/Luhn/#luhn","text":"Luhn() Validate whether a given input is a Luhn number. v . luhn () . validate ( '2222400041240011' ) # true v . luhn () . validate ( 'respect!' ) # false","title":"Luhn"},{"location":"rules/Luhn/#categorization","text":"Identifications","title":"Categorization"},{"location":"rules/Luhn/#changelog","text":"Version Description 1.0.0 Created See also: CreditCard Imei Isbn","title":"Changelog"},{"location":"rules/MacAddress/","text":"MacAddress MacAddress() Validates whether the input is a valid MAC address. v . macAddress () . validate ( '00:11:22:33:44:55' ) # true v . macAddress () . validate ( 'af-AA-22-33-44-55' ) # true Categorization Identifications Changelog Version Description 1.0.0 Created See also: Domain Iban Ip Tld","title":"MacAddress"},{"location":"rules/MacAddress/#macaddress","text":"MacAddress() Validates whether the input is a valid MAC address. v . macAddress () . validate ( '00:11:22:33:44:55' ) # true v . macAddress () . validate ( 'af-AA-22-33-44-55' ) # true","title":"MacAddress"},{"location":"rules/MacAddress/#categorization","text":"Identifications","title":"Categorization"},{"location":"rules/MacAddress/#changelog","text":"Version Description 1.0.0 Created See also: Domain Iban Ip Tld","title":"Changelog"},{"location":"rules/Max/","text":"Max Max(compare_to: Any) Validates whether the input is less than or equal to a value. v . Max ( 10 ) . validate ( 9 ) # true v . Max ( 10 ) . validate ( 10 ) # true v . Max ( 10 ) . validate ( 11 ) # false Validation makes comparison easier, check out our supported comparable values . Message template for this validator includes {compare_to} . Categorization Comparisons Changelog Version Description 1.0.0 Created See also: Between GreaterThan LessThan Min","title":"Max"},{"location":"rules/Max/#max","text":"Max(compare_to: Any) Validates whether the input is less than or equal to a value. v . Max ( 10 ) . validate ( 9 ) # true v . Max ( 10 ) . validate ( 10 ) # true v . Max ( 10 ) . validate ( 11 ) # false Validation makes comparison easier, check out our supported comparable values . Message template for this validator includes {compare_to} .","title":"Max"},{"location":"rules/Max/#categorization","text":"Comparisons","title":"Categorization"},{"location":"rules/Max/#changelog","text":"Version Description 1.0.0 Created See also: Between GreaterThan LessThan Min","title":"Changelog"},{"location":"rules/Mimetype/","text":"Mimetype Mimetype(mimetype: str) Validates if the input is a file and if its MIME type matches the expected one. v . mimetype ( 'image/png' ) . validate ( 'image.png' ) # true v . mimetype ( 'image/jpeg' ) . validate ( 'image.jpg' ) # true Categorization File system Changelog Version Description 1.0.0 Created See also: Directory Executable Exists Extension File Image Readable Size SymbolicLink Writable","title":"Mimetype"},{"location":"rules/Mimetype/#mimetype","text":"Mimetype(mimetype: str) Validates if the input is a file and if its MIME type matches the expected one. v . mimetype ( 'image/png' ) . validate ( 'image.png' ) # true v . mimetype ( 'image/jpeg' ) . validate ( 'image.jpg' ) # true","title":"Mimetype"},{"location":"rules/Mimetype/#categorization","text":"File system","title":"Categorization"},{"location":"rules/Mimetype/#changelog","text":"Version Description 1.0.0 Created See also: Directory Executable Exists Extension File Image Readable Size SymbolicLink Writable","title":"Changelog"},{"location":"rules/Min/","text":"Min Min(compare_to: Any) Validates whether the input is greater than or equal to a value. v . intVal () . Min ( 10 ) . validate ( 9 ) # false v . intVal () . Min ( 10 ) . validate ( 10 ) # true v . intVal () . Min ( 10 ) . validate ( 11 ) # true Validation makes comparison easier, check out our supported comparable values . Message template for this validator includes {compare_to} . Categorization Comparisons Changelog Version Description 1.0.0 Created See also: Between GreaterThan Length LessThan Max","title":"Min"},{"location":"rules/Min/#min","text":"Min(compare_to: Any) Validates whether the input is greater than or equal to a value. v . intVal () . Min ( 10 ) . validate ( 9 ) # false v . intVal () . Min ( 10 ) . validate ( 10 ) # true v . intVal () . Min ( 10 ) . validate ( 11 ) # true Validation makes comparison easier, check out our supported comparable values . Message template for this validator includes {compare_to} .","title":"Min"},{"location":"rules/Min/#categorization","text":"Comparisons","title":"Categorization"},{"location":"rules/Min/#changelog","text":"Version Description 1.0.0 Created See also: Between GreaterThan Length LessThan Max","title":"Changelog"},{"location":"rules/Multiple/","text":"Multiple Multiple(multiple_of: int) Validates if the input is a multiple of the given parameter v . intVal () . multiple ( 3 ) . validate ( 9 ) # true Categorization Math Numbers Changelog Version Description 1.0.0 Created See also: Even Odd PrimeNumber","title":"Multiple"},{"location":"rules/Multiple/#multiple","text":"Multiple(multiple_of: int) Validates if the input is a multiple of the given parameter v . intVal () . multiple ( 3 ) . validate ( 9 ) # true","title":"Multiple"},{"location":"rules/Multiple/#categorization","text":"Math Numbers","title":"Categorization"},{"location":"rules/Multiple/#changelog","text":"Version Description 1.0.0 Created See also: Even Odd PrimeNumber","title":"Changelog"},{"location":"rules/Negative/","text":"Negative Negative() Validates whether the input is a negative number. v . numericVal () . negative () . validate ( - 15 ) # true Categorization Math Numbers Changelog Version Description 1.0.0 Created See also: Positive","title":"Negative"},{"location":"rules/Negative/#negative","text":"Negative() Validates whether the input is a negative number. v . numericVal () . negative () . validate ( - 15 ) # true","title":"Negative"},{"location":"rules/Negative/#categorization","text":"Math Numbers","title":"Categorization"},{"location":"rules/Negative/#changelog","text":"Version Description 1.0.0 Created See also: Positive","title":"Changelog"},{"location":"rules/Nip/","text":"Nip Nip() Validates whether the input is a Polish VAT identification number (NIP). v . nip () . validate ( '1645865777' ) # true v . nip () . validate ( '1645865778' ) # false v . nip () . validate ( '1234567890' ) # false v . nip () . validate ( '164-586-57-77' ) # false v . nip () . validate ( '164-58-65-777' ) # false Categorization Identifications Changelog Version Description 1.0.0 Created See also: Pesel PolishIdCard","title":"Nip"},{"location":"rules/Nip/#nip","text":"Nip() Validates whether the input is a Polish VAT identification number (NIP). v . nip () . validate ( '1645865777' ) # true v . nip () . validate ( '1645865778' ) # false v . nip () . validate ( '1234567890' ) # false v . nip () . validate ( '164-586-57-77' ) # false v . nip () . validate ( '164-58-65-777' ) # false","title":"Nip"},{"location":"rules/Nip/#categorization","text":"Identifications","title":"Categorization"},{"location":"rules/Nip/#changelog","text":"Version Description 1.0.0 Created See also: Pesel PolishIdCard","title":"Changelog"},{"location":"rules/No/","text":"No No() Validates if value is considered as \"No\". v . no () . validate ( 'N' ) # true v . no () . validate ( 'Nay' ) # true v . no () . validate ( 'Nix' ) # true v . no () . validate ( 'No' ) # true v . no () . validate ( 'Nope' ) # true v . no () . validate ( 'Not' ) # true This rule is case-insensitive. Categorization Booleans Changelog Version Description 1.0.0 Created See also: BoolType BoolVal Yes","title":"No"},{"location":"rules/No/#no","text":"No() Validates if value is considered as \"No\". v . no () . validate ( 'N' ) # true v . no () . validate ( 'Nay' ) # true v . no () . validate ( 'Nix' ) # true v . no () . validate ( 'No' ) # true v . no () . validate ( 'Nope' ) # true v . no () . validate ( 'Not' ) # true This rule is case-insensitive.","title":"No"},{"location":"rules/No/#categorization","text":"Booleans","title":"Categorization"},{"location":"rules/No/#changelog","text":"Version Description 1.0.0 Created See also: BoolType BoolVal Yes","title":"Changelog"},{"location":"rules/NoWhitespace/","text":"NoWhitespace NoWhitespace() Validates if a string contains no whitespace (spaces, tabs and line breaks); v . noWhitespace () . validate ( 'foo bar' ) # false v . noWhitespace () . validate ( \"foo \\n bar\" ) # false This is most useful when chaining with other validators such as Alnum() Categorization Strings Changelog Version Description 1.0.0 Created See also: Alnum Alpha CreditCard NotBlank NotEmpty NotOptional Optional","title":"NoWhitespace"},{"location":"rules/NoWhitespace/#nowhitespace","text":"NoWhitespace() Validates if a string contains no whitespace (spaces, tabs and line breaks); v . noWhitespace () . validate ( 'foo bar' ) # false v . noWhitespace () . validate ( \"foo \\n bar\" ) # false This is most useful when chaining with other validators such as Alnum()","title":"NoWhitespace"},{"location":"rules/NoWhitespace/#categorization","text":"Strings","title":"Categorization"},{"location":"rules/NoWhitespace/#changelog","text":"Version Description 1.0.0 Created See also: Alnum Alpha CreditCard NotBlank NotEmpty NotOptional Optional","title":"Changelog"},{"location":"rules/NoneOf/","text":"NoneOf NoneOf(*rules: Any) Validates if NONE of the given validator rules: v . noneOf ( v . intVal (), v . floatVal () ) . validate ( 'foo' ) # true In the sample above, 'foo' isn't a integer nor a float, so noneOf returns true. Categorization Composite Nesting Changelog Version Description 1.0.0 Created See also: AllOf AnyOf Not OneOf When","title":"NoneOf"},{"location":"rules/NoneOf/#noneof","text":"NoneOf(*rules: Any) Validates if NONE of the given validator rules: v . noneOf ( v . intVal (), v . floatVal () ) . validate ( 'foo' ) # true In the sample above, 'foo' isn't a integer nor a float, so noneOf returns true.","title":"NoneOf"},{"location":"rules/NoneOf/#categorization","text":"Composite Nesting","title":"Categorization"},{"location":"rules/NoneOf/#changelog","text":"Version Description 1.0.0 Created See also: AllOf AnyOf Not OneOf When","title":"Changelog"},{"location":"rules/NoneType/","text":"NoneType NoneType() Validates whether the input is None . v . noneType () . validate ( None ) # true Categorization Types Changelog Version Description 1.0.0 Created See also: ListType BoolType BoolVal CallableType FloatType IntType NotBlank NotEmpty NotOptional Nullable Number Optional StringType StringVal Type","title":"NoneType"},{"location":"rules/NoneType/#nonetype","text":"NoneType() Validates whether the input is None . v . noneType () . validate ( None ) # true","title":"NoneType"},{"location":"rules/NoneType/#categorization","text":"Types","title":"Categorization"},{"location":"rules/NoneType/#changelog","text":"Version Description 1.0.0 Created See also: ListType BoolType BoolVal CallableType FloatType IntType NotBlank NotEmpty NotOptional Nullable Number Optional StringType StringVal Type","title":"Changelog"},{"location":"rules/Not/","text":"Not Not(rule: AbstractRule) Negates any rule. v . Not ( v . ip ()) . validate ( 'foo' ) # true In the sample above, validator returns true because 'foo' isn't an IP Address. You can negate complex, grouped or chained validators as well: v . Not ( v . intVal () . positive ()) . validate ( - 1.5 ) # true Each other validation has custom messages for negated rules. Categorization Conditions Nesting Changelog Version Description 1.0.0 Created See also: NoneOf","title":"Not"},{"location":"rules/Not/#not","text":"Not(rule: AbstractRule) Negates any rule. v . Not ( v . ip ()) . validate ( 'foo' ) # true In the sample above, validator returns true because 'foo' isn't an IP Address. You can negate complex, grouped or chained validators as well: v . Not ( v . intVal () . positive ()) . validate ( - 1.5 ) # true Each other validation has custom messages for negated rules.","title":"Not"},{"location":"rules/Not/#categorization","text":"Conditions Nesting","title":"Categorization"},{"location":"rules/Not/#changelog","text":"Version Description 1.0.0 Created See also: NoneOf","title":"Changelog"},{"location":"rules/NotBlank/","text":"NotBlank NotBlank() Validates if the given input is not a blank value ( None , zeros, empty strings or empty arrays). v . notBlank () . validate ( None ) # false v . notBlank () . validate ( '' ) # false v . notBlank () . validate ([]) # false v . notBlank () . validate ( ' ' ) # false v . notBlank () . validate ( 0 ) # false v . notBlank () . validate ( '0' ) # false v . notBlank () . validate ( 0 ) # false v . notBlank () . validate ( False ) # false v . notBlank () . validate ([ '' ]) # false v . notBlank () . validate ([ ' ' ]) # false v . notBlank () . validate ([ 0 ]) # false v . notBlank () . validate ([ '0' ]) # false v . notBlank () . validate ([ False ]) # false v . notBlank () . validate ( '0.0' ) # true v . notBlank () . validate ([[ '' ], [ 0 ]]) # true It's similar to NotEmpty but it's way more strict. Categorization Miscellaneous Changelog Version Description 1.0.0 Created See also: NoWhitespace NotEmpty NotOptional NoneType Number Optional","title":"NotBlank"},{"location":"rules/NotBlank/#notblank","text":"NotBlank() Validates if the given input is not a blank value ( None , zeros, empty strings or empty arrays). v . notBlank () . validate ( None ) # false v . notBlank () . validate ( '' ) # false v . notBlank () . validate ([]) # false v . notBlank () . validate ( ' ' ) # false v . notBlank () . validate ( 0 ) # false v . notBlank () . validate ( '0' ) # false v . notBlank () . validate ( 0 ) # false v . notBlank () . validate ( False ) # false v . notBlank () . validate ([ '' ]) # false v . notBlank () . validate ([ ' ' ]) # false v . notBlank () . validate ([ 0 ]) # false v . notBlank () . validate ([ '0' ]) # false v . notBlank () . validate ([ False ]) # false v . notBlank () . validate ( '0.0' ) # true v . notBlank () . validate ([[ '' ], [ 0 ]]) # true It's similar to NotEmpty but it's way more strict.","title":"NotBlank"},{"location":"rules/NotBlank/#categorization","text":"Miscellaneous","title":"Categorization"},{"location":"rules/NotBlank/#changelog","text":"Version Description 1.0.0 Created See also: NoWhitespace NotEmpty NotOptional NoneType Number Optional","title":"Changelog"},{"location":"rules/NotEmpty/","text":"NotEmpty NotEmpty() Validates whether the given input is not empty. This function also takes whitespace into account, use noWhitespace() if no spaces or linebreaks and other whitespace anywhere in the input is desired. v . stringType () . notEmpty () . validate ( '' ) # false Null values are empty: v . notEmpty () . validate ( None ) # false Numbers: v . intVal () . notEmpty () . validate ( 0 ) # false Empty arrays: v . listType () . notEmpty () . validate ([]) # false Whitespace: v . stringType () . notEmpty () . validate ( ' ' ) # false v . stringType () . notEmpty () . validate ( \" \\t \\n \\r \" ) # false Categorization Miscellaneous Changelog Version Description 1.0.0 Created See also: Each NoWhitespace NotBlank NotOptional NoneType Number Optional","title":"NotEmpty"},{"location":"rules/NotEmpty/#notempty","text":"NotEmpty() Validates whether the given input is not empty. This function also takes whitespace into account, use noWhitespace() if no spaces or linebreaks and other whitespace anywhere in the input is desired. v . stringType () . notEmpty () . validate ( '' ) # false Null values are empty: v . notEmpty () . validate ( None ) # false Numbers: v . intVal () . notEmpty () . validate ( 0 ) # false Empty arrays: v . listType () . notEmpty () . validate ([]) # false Whitespace: v . stringType () . notEmpty () . validate ( ' ' ) # false v . stringType () . notEmpty () . validate ( \" \\t \\n \\r \" ) # false","title":"NotEmpty"},{"location":"rules/NotEmpty/#categorization","text":"Miscellaneous","title":"Categorization"},{"location":"rules/NotEmpty/#changelog","text":"Version Description 1.0.0 Created See also: Each NoWhitespace NotBlank NotOptional NoneType Number Optional","title":"Changelog"},{"location":"rules/NotOptional/","text":"NotOptional NotOptional() Validates if the given input is not optional. By optional we consider None or an empty string ( '' ). v . notOptional () . validate ( '' ) # false v . notOptional () . validate ( None ) # false Other values: v . notOptional () . validate ([]) # true v . notOptional () . validate ( ' ' ) # true v . notOptional () . validate ( 0 ) # true v . notOptional () . validate ( '0' ) # true v . notOptional () . validate ( 0 ) # true v . notOptional () . validate ( '0.0' ) # true v . notOptional () . validate ( False ) # true v . notOptional () . validate ([ '' ]) # true v . notOptional () . validate ([ ' ' ]) # true v . notOptional () . validate ([ 0 ]) # true v . notOptional () . validate ([ '0' ]) # true v . notOptional () . validate ([ False ]) # true v . notOptional () . validate ([[ '' ], [ 0 ]]) # true v . notOptional () . validate ( object ()) # true Categorization Miscellaneous Changelog Version Description 1.0.0 Created See also: NoWhitespace NotBlank NotEmpty NoneType Number Optional","title":"NotOptional"},{"location":"rules/NotOptional/#notoptional","text":"NotOptional() Validates if the given input is not optional. By optional we consider None or an empty string ( '' ). v . notOptional () . validate ( '' ) # false v . notOptional () . validate ( None ) # false Other values: v . notOptional () . validate ([]) # true v . notOptional () . validate ( ' ' ) # true v . notOptional () . validate ( 0 ) # true v . notOptional () . validate ( '0' ) # true v . notOptional () . validate ( 0 ) # true v . notOptional () . validate ( '0.0' ) # true v . notOptional () . validate ( False ) # true v . notOptional () . validate ([ '' ]) # true v . notOptional () . validate ([ ' ' ]) # true v . notOptional () . validate ([ 0 ]) # true v . notOptional () . validate ([ '0' ]) # true v . notOptional () . validate ([ False ]) # true v . notOptional () . validate ([[ '' ], [ 0 ]]) # true v . notOptional () . validate ( object ()) # true","title":"NotOptional"},{"location":"rules/NotOptional/#categorization","text":"Miscellaneous","title":"Categorization"},{"location":"rules/NotOptional/#changelog","text":"Version Description 1.0.0 Created See also: NoWhitespace NotBlank NotEmpty NoneType Number Optional","title":"Changelog"},{"location":"rules/Nullable/","text":"Nullable Nullable(rule: AbstractRule) Validates the given input with a defined rule when input is not NULL. v . nullable ( v . email ()) . validate ( None ) # true v . nullable ( v . email ()) . validate ( 'example@example.com' ) # true v . nullable ( v . email ()) . validate ( 'not an email' ) # false Categorization Nesting Changelog Version Description 1.0.0 Created See also: NoneType Optional","title":"Nullable"},{"location":"rules/Nullable/#nullable","text":"Nullable(rule: AbstractRule) Validates the given input with a defined rule when input is not NULL. v . nullable ( v . email ()) . validate ( None ) # true v . nullable ( v . email ()) . validate ( 'example@example.com' ) # true v . nullable ( v . email ()) . validate ( 'not an email' ) # false","title":"Nullable"},{"location":"rules/Nullable/#categorization","text":"Nesting","title":"Categorization"},{"location":"rules/Nullable/#changelog","text":"Version Description 1.0.0 Created See also: NoneType Optional","title":"Changelog"},{"location":"rules/Number/","text":"Number Number() Validates if the input is a number. v . number () . validate ( 42 ) # true v . number () . validate ( math . nan ) # false \"In computing, NaN, standing for not a number, is a numeric data type value representing an undefined or unrepresentable value, especially in floating-point calculations.\" Wikipedia Categorization Numbers Changelog Version Description 1.0.0 Created See also: BoolType CallableType FloatType IntType NotBlank NotEmpty NotOptional NoneType NumericVal StringType Type","title":"Number"},{"location":"rules/Number/#number","text":"Number() Validates if the input is a number. v . number () . validate ( 42 ) # true v . number () . validate ( math . nan ) # false \"In computing, NaN, standing for not a number, is a numeric data type value representing an undefined or unrepresentable value, especially in floating-point calculations.\" Wikipedia","title":"Number"},{"location":"rules/Number/#categorization","text":"Numbers","title":"Categorization"},{"location":"rules/Number/#changelog","text":"Version Description 1.0.0 Created See also: BoolType CallableType FloatType IntType NotBlank NotEmpty NotOptional NoneType NumericVal StringType Type","title":"Changelog"},{"location":"rules/NumericVal/","text":"NumericVal NumericVal() Validates whether the input is numeric. v . numericVal () . validate ( - 12 ) # true v . numericVal () . validate ( '135.0' ) # true This rule doesn't validate if the input is a valid number, for that purpose use the Number rule. Categorization Numbers Types Changelog Version Description 1.0.0 Created See also: Decimal Digit Factor Finite FloatType Infinite IntType IntVal Number Uppercase","title":"NumericVal"},{"location":"rules/NumericVal/#numericval","text":"NumericVal() Validates whether the input is numeric. v . numericVal () . validate ( - 12 ) # true v . numericVal () . validate ( '135.0' ) # true This rule doesn't validate if the input is a valid number, for that purpose use the Number rule.","title":"NumericVal"},{"location":"rules/NumericVal/#categorization","text":"Numbers Types","title":"Categorization"},{"location":"rules/NumericVal/#changelog","text":"Version Description 1.0.0 Created See also: Decimal Digit Factor Finite FloatType Infinite IntType IntVal Number Uppercase","title":"Changelog"},{"location":"rules/Odd/","text":"Odd Odd() Validates whether the input is an odd number or not. v . odd () . validate ( 0 ) # false v . odd () . validate ( 3 ) # true Using intVal() before odd() is a best practice. Categorization Numbers Changelog Version Description 1.0.0 Created See also: Even Multiple","title":"Odd"},{"location":"rules/Odd/#odd","text":"Odd() Validates whether the input is an odd number or not. v . odd () . validate ( 0 ) # false v . odd () . validate ( 3 ) # true Using intVal() before odd() is a best practice.","title":"Odd"},{"location":"rules/Odd/#categorization","text":"Numbers","title":"Categorization"},{"location":"rules/Odd/#changelog","text":"Version Description 1.0.0 Created See also: Even Multiple","title":"Changelog"},{"location":"rules/OneOf/","text":"OneOf OneOf(*rules: Any) Will validate if exactly one inner validator passes. v . oneOf ( v . digit (), v . alpha ()) . validate ( 'AB' ) # true v . oneOf ( v . digit (), v . alpha ()) . validate ( '12' ) # true v . oneOf ( v . digit (), v . alpha ()) . validate ( 'AB12' ) # false v . oneOf ( v . digit (), v . alpha ()) . validate ( '*' ) # false The chains above validate if the input is either a digit or an alphabetic character, one or the other, but not neither nor both. Categorization Composite Nesting Changelog Version Description 1.0.0 Created See also: AllOf AnyOf NoneOf When","title":"OneOf"},{"location":"rules/OneOf/#oneof","text":"OneOf(*rules: Any) Will validate if exactly one inner validator passes. v . oneOf ( v . digit (), v . alpha ()) . validate ( 'AB' ) # true v . oneOf ( v . digit (), v . alpha ()) . validate ( '12' ) # true v . oneOf ( v . digit (), v . alpha ()) . validate ( 'AB12' ) # false v . oneOf ( v . digit (), v . alpha ()) . validate ( '*' ) # false The chains above validate if the input is either a digit or an alphabetic character, one or the other, but not neither nor both.","title":"OneOf"},{"location":"rules/OneOf/#categorization","text":"Composite Nesting","title":"Categorization"},{"location":"rules/OneOf/#changelog","text":"Version Description 1.0.0 Created See also: AllOf AnyOf NoneOf When","title":"Changelog"},{"location":"rules/Optional/","text":"Optional Optional(rule: AbstractRule) Validates if the given input is optional or not. By optional we consider None or an empty string ( '' ). v . optional ( v . alpha ()) . validate ( '' ) # true v . optional ( v . digit ()) . validate ( None ) # true Categorization Nesting Changelog Version Description 1.0.0 Created See also: NoWhitespace NotBlank NotEmpty NotOptional NoneType Nullable","title":"Optional"},{"location":"rules/Optional/#optional","text":"Optional(rule: AbstractRule) Validates if the given input is optional or not. By optional we consider None or an empty string ( '' ). v . optional ( v . alpha ()) . validate ( '' ) # true v . optional ( v . digit ()) . validate ( None ) # true","title":"Optional"},{"location":"rules/Optional/#categorization","text":"Nesting","title":"Categorization"},{"location":"rules/Optional/#changelog","text":"Version Description 1.0.0 Created See also: NoWhitespace NotBlank NotEmpty NotOptional NoneType Nullable","title":"Changelog"},{"location":"rules/PerfectSquare/","text":"PerfectSquare PerfectSquare() Validates whether the input is a perfect square. v . perfectSquare () . validate ( 25 ) # true (5*5) v . perfectSquare () . validate ( 9 ) # true (3*3) Categorization Math Numbers Changelog Version Description 1.0.0 Created See also: Factor Fibonacci PrimeNumber","title":"PerfectSquare"},{"location":"rules/PerfectSquare/#perfectsquare","text":"PerfectSquare() Validates whether the input is a perfect square. v . perfectSquare () . validate ( 25 ) # true (5*5) v . perfectSquare () . validate ( 9 ) # true (3*3)","title":"PerfectSquare"},{"location":"rules/PerfectSquare/#categorization","text":"Math Numbers","title":"Categorization"},{"location":"rules/PerfectSquare/#changelog","text":"Version Description 1.0.0 Created See also: Factor Fibonacci PrimeNumber","title":"Changelog"},{"location":"rules/Pesel/","text":"Pesel Pesel() Validates PESEL (Polish human identification number). v . pesel () . validate ( '21120209256' ) # true v . pesel () . validate ( '97072704800' ) # true v . pesel () . validate ( '97072704801' ) # false v . pesel () . validate ( 'PESEL123456' ) # false Categorization Identifications Changelog Version Description 1.0.0 Created See also: Nip PolishIdCard","title":"Pesel"},{"location":"rules/Pesel/#pesel","text":"Pesel() Validates PESEL (Polish human identification number). v . pesel () . validate ( '21120209256' ) # true v . pesel () . validate ( '97072704800' ) # true v . pesel () . validate ( '97072704801' ) # false v . pesel () . validate ( 'PESEL123456' ) # false","title":"Pesel"},{"location":"rules/Pesel/#categorization","text":"Identifications","title":"Categorization"},{"location":"rules/Pesel/#changelog","text":"Version Description 1.0.0 Created See also: Nip PolishIdCard","title":"Changelog"},{"location":"rules/Phone/","text":"Phone Phone(strict: bool = False) Validates whether the input is a valid phone number. This rule uses library phonenumbers . There are two methods to validate phone number: - is_possible_number - fast method, didn't do additional checks (strict = False) - is_valid_number - a little slower, because it does additional checks (strict = True) You can switch between these two method with strict parameter. v . phone () . validate ( '+7 (999) 555 5555' ) # true v . phone () . validate ( '+5(555)555 5555' ) # true v . phone () . validate ( '+33(1)22 22 22 22' ) # true Categorization Strings Changelog Version Description 1.0.0 Created See also: Email Json Url VideoUrl","title":"Phone"},{"location":"rules/Phone/#phone","text":"Phone(strict: bool = False) Validates whether the input is a valid phone number. This rule uses library phonenumbers . There are two methods to validate phone number: - is_possible_number - fast method, didn't do additional checks (strict = False) - is_valid_number - a little slower, because it does additional checks (strict = True) You can switch between these two method with strict parameter. v . phone () . validate ( '+7 (999) 555 5555' ) # true v . phone () . validate ( '+5(555)555 5555' ) # true v . phone () . validate ( '+33(1)22 22 22 22' ) # true","title":"Phone"},{"location":"rules/Phone/#categorization","text":"Strings","title":"Categorization"},{"location":"rules/Phone/#changelog","text":"Version Description 1.0.0 Created See also: Email Json Url VideoUrl","title":"Changelog"},{"location":"rules/Pis/","text":"Pis Pis() Validates a Brazilian PIS/NIS number ignoring any non-digit char. v . pis () . validate ( '120.0340.678-8' ) # true v . pis () . validate ( '120.03406788' ) # true v . pis () . validate ( '120.0340.6788' ) # true v . pis () . validate ( '1.2.0.0.3.4.0.6.7.8.8' ) # true v . pis () . validate ( '12003406788' ) # true Categorization Identifications Changelog Version Description 1.0.0 Created See also: Cnh Cnpj Cpf","title":"Pis"},{"location":"rules/Pis/#pis","text":"Pis() Validates a Brazilian PIS/NIS number ignoring any non-digit char. v . pis () . validate ( '120.0340.678-8' ) # true v . pis () . validate ( '120.03406788' ) # true v . pis () . validate ( '120.0340.6788' ) # true v . pis () . validate ( '1.2.0.0.3.4.0.6.7.8.8' ) # true v . pis () . validate ( '12003406788' ) # true","title":"Pis"},{"location":"rules/Pis/#categorization","text":"Identifications","title":"Categorization"},{"location":"rules/Pis/#changelog","text":"Version Description 1.0.0 Created See also: Cnh Cnpj Cpf","title":"Changelog"},{"location":"rules/PolishIdCard/","text":"PolishIdCard PolishIdCard() Validates whether the input is a Polish identity card (Dow\u00f3d Osobisty). v . polishIdCard () . validate ( 'AYW036733' ) # true v . polishIdCard () . validate ( 'APH505567' ) # true v . polishIdCard () . validate ( 'APH 505567' ) # false v . polishIdCard () . validate ( 'AYW036731' ) # false Categorization Identifications Changelog Version Description 1.0.0 Created See also: Nip Pesel","title":"PolishIdCard"},{"location":"rules/PolishIdCard/#polishidcard","text":"PolishIdCard() Validates whether the input is a Polish identity card (Dow\u00f3d Osobisty). v . polishIdCard () . validate ( 'AYW036733' ) # true v . polishIdCard () . validate ( 'APH505567' ) # true v . polishIdCard () . validate ( 'APH 505567' ) # false v . polishIdCard () . validate ( 'AYW036731' ) # false","title":"PolishIdCard"},{"location":"rules/PolishIdCard/#categorization","text":"Identifications","title":"Categorization"},{"location":"rules/PolishIdCard/#changelog","text":"Version Description 1.0.0 Created See also: Nip Pesel","title":"Changelog"},{"location":"rules/Positive/","text":"Positive Positive() Validates whether the input is a positive number. v . positive () . validate ( 1 ) # true v . positive () . validate ( 0 ) # false v . positive () . validate ( - 15 ) # false Categorization Math Numbers Changelog Version Description 1.0.0 Created See also: Negative","title":"Positive"},{"location":"rules/Positive/#positive","text":"Positive() Validates whether the input is a positive number. v . positive () . validate ( 1 ) # true v . positive () . validate ( 0 ) # false v . positive () . validate ( - 15 ) # false","title":"Positive"},{"location":"rules/Positive/#categorization","text":"Math Numbers","title":"Categorization"},{"location":"rules/Positive/#changelog","text":"Version Description 1.0.0 Created See also: Negative","title":"Changelog"},{"location":"rules/PostalCode/","text":"PostalCode PostalCode(country_code: str) Validates whether the input is a valid postal code or not. v . postalCode ( 'BR' ) . validate ( '02179000' ) # true v . postalCode ( 'BR' ) . validate ( '02179-000' ) # true v . postalCode ( 'US' ) . validate ( '02179-000' ) # false v . postalCode ( 'US' ) . validate ( '55372' ) # true v . postalCode ( 'PL' ) . validate ( '99-300' ) # true Message template for this validator includes {country_code} . Extracted from GeoNames . Categorization Localization Strings Changelog Version Description 1.0.0 Created See also: CountryCode Iban","title":"PostalCode"},{"location":"rules/PostalCode/#postalcode","text":"PostalCode(country_code: str) Validates whether the input is a valid postal code or not. v . postalCode ( 'BR' ) . validate ( '02179000' ) # true v . postalCode ( 'BR' ) . validate ( '02179-000' ) # true v . postalCode ( 'US' ) . validate ( '02179-000' ) # false v . postalCode ( 'US' ) . validate ( '55372' ) # true v . postalCode ( 'PL' ) . validate ( '99-300' ) # true Message template for this validator includes {country_code} . Extracted from GeoNames .","title":"PostalCode"},{"location":"rules/PostalCode/#categorization","text":"Localization Strings","title":"Categorization"},{"location":"rules/PostalCode/#changelog","text":"Version Description 1.0.0 Created See also: CountryCode Iban","title":"Changelog"},{"location":"rules/PrimeNumber/","text":"PrimeNumber PrimeNumber() Validates a prime number v . primeNumber () . validate ( 7 ) # true Categorization Math Numbers Changelog Version Description 1.0.0 Created See also: Factor Fibonacci Multiple PerfectSquare","title":"PrimeNumber"},{"location":"rules/PrimeNumber/#primenumber","text":"PrimeNumber() Validates a prime number v . primeNumber () . validate ( 7 ) # true","title":"PrimeNumber"},{"location":"rules/PrimeNumber/#categorization","text":"Math Numbers","title":"Categorization"},{"location":"rules/PrimeNumber/#changelog","text":"Version Description 1.0.0 Created See also: Factor Fibonacci Multiple PerfectSquare","title":"Changelog"},{"location":"rules/Printable/","text":"Printable Printable(*additional_chars: str) This rule checks if all characters in the input are printable. Characters that occupy printing space on the screen are known as printable characters. For example: - letters and symbols - digits - punctuation - whitespace v . printable () . validate ( 'LMKA0$% _123' ) # true Categorization Strings Changelog Version Description 1.0.0 Created See also: Control Punct","title":"Printable"},{"location":"rules/Printable/#printable","text":"Printable(*additional_chars: str) This rule checks if all characters in the input are printable. Characters that occupy printing space on the screen are known as printable characters. For example: - letters and symbols - digits - punctuation - whitespace v . printable () . validate ( 'LMKA0$% _123' ) # true","title":"Printable"},{"location":"rules/Printable/#categorization","text":"Strings","title":"Categorization"},{"location":"rules/Printable/#changelog","text":"Version Description 1.0.0 Created See also: Control Punct","title":"Changelog"},{"location":"rules/Punct/","text":"Punct Punct(*additional_chars: str) Validates whether the input composed by only punctuation characters. v . punct () . validate ( '&,.;[]' ) # true Categorization Strings Changelog Version Description 1.0.0 Created See also: Control Printable","title":"Punct"},{"location":"rules/Punct/#punct","text":"Punct(*additional_chars: str) Validates whether the input composed by only punctuation characters. v . punct () . validate ( '&,.;[]' ) # true","title":"Punct"},{"location":"rules/Punct/#categorization","text":"Strings","title":"Categorization"},{"location":"rules/Punct/#changelog","text":"Version Description 1.0.0 Created See also: Control Printable","title":"Changelog"},{"location":"rules/Readable/","text":"Readable Readable() Validates if the given data is a file exists and is readable. v . readable () . validate ( __file__ ) # true Categorization File system Changelog Version Description 1.0.0 Created See also: Directory Executable Exists Extension File Image Mimetype Size SymbolicLink Writable","title":"Readable"},{"location":"rules/Readable/#readable","text":"Readable() Validates if the given data is a file exists and is readable. v . readable () . validate ( __file__ ) # true","title":"Readable"},{"location":"rules/Readable/#categorization","text":"File system","title":"Categorization"},{"location":"rules/Readable/#changelog","text":"Version Description 1.0.0 Created See also: Directory Executable Exists Extension File Image Mimetype Size SymbolicLink Writable","title":"Changelog"},{"location":"rules/Regex/","text":"Regex Regex(regex: Union[str, Pattern[str]]) Validates whether the input matches a defined regular expression. You can set string or re.Pattern (output of re.compile() ) for regex pattern. v . regex ( '[a-z]' ) . validate ( 'a' ) # true v . regex ( re . compile ( '[a-z]' )) . validate ( 'a' ) # true Message template for this validator includes {regex} . Categorization Strings Changelog Version Description 1.0.0 Created See also: Alnum Alpha Contains CreditCard Decimal Digit EndsWith Roman StartsWith Version","title":"Regex"},{"location":"rules/Regex/#regex","text":"Regex(regex: Union[str, Pattern[str]]) Validates whether the input matches a defined regular expression. You can set string or re.Pattern (output of re.compile() ) for regex pattern. v . regex ( '[a-z]' ) . validate ( 'a' ) # true v . regex ( re . compile ( '[a-z]' )) . validate ( 'a' ) # true Message template for this validator includes {regex} .","title":"Regex"},{"location":"rules/Regex/#categorization","text":"Strings","title":"Categorization"},{"location":"rules/Regex/#changelog","text":"Version Description 1.0.0 Created See also: Alnum Alpha Contains CreditCard Decimal Digit EndsWith Roman StartsWith Version","title":"Changelog"},{"location":"rules/Roman/","text":"Roman Roman() Validates if the input is a Roman numeral. v . roman () . validate ( 'IV' ) # true Categorization Numbers Changelog Version Description 1.0.0 Created See also: Include Regex Uppercase Version","title":"Roman"},{"location":"rules/Roman/#roman","text":"Roman() Validates if the input is a Roman numeral. v . roman () . validate ( 'IV' ) # true","title":"Roman"},{"location":"rules/Roman/#categorization","text":"Numbers","title":"Categorization"},{"location":"rules/Roman/#changelog","text":"Version Description 1.0.0 Created See also: Include Regex Uppercase Version","title":"Changelog"},{"location":"rules/Size/","text":"Size Size(min_size: Optional[str] = None, max_size: Optional[str] = None) Validates whether the input is a file that is of a certain size or not. v . size ( '1KB' ) . validate ( filename ) # Must have at least 1KB size v . size ( '1MB' , '2MB' ) . validate ( filename ) # Must have the size between 1MB and 2MB v . size ( None , '1GB' ) . validate ( filename ) # Must not be greater than 1GB v . size ( max_size = '1GB' ) . validate ( filename ) # Must not be greater than 1GB Sizes are not case-sensitive and the accepted values are: B KB MB GB TB PB EB ZB YB Message template for this validator includes {min_size} and {max_size} . Categorization File system Changelog Version Description 1.0.0 Created See also: Directory Executable Exists Extension File Image Mimetype Readable SymbolicLink Writable","title":"Size"},{"location":"rules/Size/#size","text":"Size(min_size: Optional[str] = None, max_size: Optional[str] = None) Validates whether the input is a file that is of a certain size or not. v . size ( '1KB' ) . validate ( filename ) # Must have at least 1KB size v . size ( '1MB' , '2MB' ) . validate ( filename ) # Must have the size between 1MB and 2MB v . size ( None , '1GB' ) . validate ( filename ) # Must not be greater than 1GB v . size ( max_size = '1GB' ) . validate ( filename ) # Must not be greater than 1GB Sizes are not case-sensitive and the accepted values are: B KB MB GB TB PB EB ZB YB Message template for this validator includes {min_size} and {max_size} .","title":"Size"},{"location":"rules/Size/#categorization","text":"File system","title":"Categorization"},{"location":"rules/Size/#changelog","text":"Version Description 1.0.0 Created See also: Directory Executable Exists Extension File Image Mimetype Readable SymbolicLink Writable","title":"Changelog"},{"location":"rules/Slug/","text":"Slug Slug() Validates whether the input is a valid slug. v . slug () . validate ( 'my-wordpress-title' ) # true v . slug () . validate ( 'my-wordpress--title' ) # false v . slug () . validate ( 'my-wordpress-title-' ) # false Categorization Strings Changelog Version Description 1.0.0 Created See also: Url VideoUrl","title":"Slug"},{"location":"rules/Slug/#slug","text":"Slug() Validates whether the input is a valid slug. v . slug () . validate ( 'my-wordpress-title' ) # true v . slug () . validate ( 'my-wordpress--title' ) # false v . slug () . validate ( 'my-wordpress-title-' ) # false","title":"Slug"},{"location":"rules/Slug/#categorization","text":"Strings","title":"Categorization"},{"location":"rules/Slug/#changelog","text":"Version Description 1.0.0 Created See also: Url VideoUrl","title":"Changelog"},{"location":"rules/Space/","text":"Space Space(*additional_chars: str) Validates whether the input contains only whitespaces characters. v . space () . validate ( ' ' ) # true Categorization Strings Changelog Version Description 1.0.0 Created See also: Control","title":"Space"},{"location":"rules/Space/#space","text":"Space(*additional_chars: str) Validates whether the input contains only whitespaces characters. v . space () . validate ( ' ' ) # true","title":"Space"},{"location":"rules/Space/#categorization","text":"Strings","title":"Categorization"},{"location":"rules/Space/#changelog","text":"Version Description 1.0.0 Created See also: Control","title":"Changelog"},{"location":"rules/StartsWith/","text":"StartsWith StartsWith(start_value: Any) Validates whether the input starts with a given value. This validator is similar to Contains , but validates only if the value is at the beginning of the input. For strings: v . startsWith ( 'lorem' ) . validate ( 'lorem ipsum' ) # true For lists: v . startsWith ( 'lorem' ) . validate ([ 'lorem' , 'ipsum' ]) # true Message template for this validator includes {start_value} . Categorization Arrays Strings Changelog Version Description 1.0.0 Created See also: Contains EndsWith Include Regex","title":"StartsWith"},{"location":"rules/StartsWith/#startswith","text":"StartsWith(start_value: Any) Validates whether the input starts with a given value. This validator is similar to Contains , but validates only if the value is at the beginning of the input. For strings: v . startsWith ( 'lorem' ) . validate ( 'lorem ipsum' ) # true For lists: v . startsWith ( 'lorem' ) . validate ([ 'lorem' , 'ipsum' ]) # true Message template for this validator includes {start_value} .","title":"StartsWith"},{"location":"rules/StartsWith/#categorization","text":"Arrays Strings","title":"Categorization"},{"location":"rules/StartsWith/#changelog","text":"Version Description 1.0.0 Created See also: Contains EndsWith Include Regex","title":"Changelog"},{"location":"rules/StringType/","text":"StringType StringType() Validates whether the type of an input is string or not. v . stringType () . validate ( 'hi' ) # true Categorization Strings Types Changelog Version Description 1.0.0 Created See also: Alnum ListType BoolType BoolVal CallableType FloatType IntType NoneType Number StringVal Type","title":"StringType"},{"location":"rules/StringType/#stringtype","text":"StringType() Validates whether the type of an input is string or not. v . stringType () . validate ( 'hi' ) # true","title":"StringType"},{"location":"rules/StringType/#categorization","text":"Strings Types","title":"Categorization"},{"location":"rules/StringType/#changelog","text":"Version Description 1.0.0 Created See also: Alnum ListType BoolType BoolVal CallableType FloatType IntType NoneType Number StringVal Type","title":"Changelog"},{"location":"rules/StringVal/","text":"StringVal StringVal() Validates whether the input can be used as a string. It checks if input has attribute __str__ . v . stringVal () . validate ( '6' ) # true v . stringVal () . validate ( 'String' ) # true v . stringVal () . validate ( 1.0 ) # true v . stringVal () . validate ( 42 ) # true v . stringVal () . validate ( False ) # true v . stringVal () . validate ( True ) # true Does Python have some object without __str__ attribute? Categorization Strings Types Changelog Version Description 1.0.0 Created See also: Alnum BoolType CallableType FloatType IntType NoneType StringType Type","title":"StringVal"},{"location":"rules/StringVal/#stringval","text":"StringVal() Validates whether the input can be used as a string. It checks if input has attribute __str__ . v . stringVal () . validate ( '6' ) # true v . stringVal () . validate ( 'String' ) # true v . stringVal () . validate ( 1.0 ) # true v . stringVal () . validate ( 42 ) # true v . stringVal () . validate ( False ) # true v . stringVal () . validate ( True ) # true Does Python have some object without __str__ attribute?","title":"StringVal"},{"location":"rules/StringVal/#categorization","text":"Strings Types","title":"Categorization"},{"location":"rules/StringVal/#changelog","text":"Version Description 1.0.0 Created See also: Alnum BoolType CallableType FloatType IntType NoneType StringType Type","title":"Changelog"},{"location":"rules/Subset/","text":"Subset Subset(superset: Union[List[Any], Tuple[Any], Set[Any], range]) Validates whether the input is a subset of a given value. v . subset ([ 1 , 2 , 3 ]) . validate ([ 1 , 2 ]) # true v . subset ([ 1 , 2 ]) . validate ([ 1 , 2 , 3 ]) # false Categorization Arrays Changelog Version Description 1.0.0 Created See also: ListType","title":"Subset"},{"location":"rules/Subset/#subset","text":"Subset(superset: Union[List[Any], Tuple[Any], Set[Any], range]) Validates whether the input is a subset of a given value. v . subset ([ 1 , 2 , 3 ]) . validate ([ 1 , 2 ]) # true v . subset ([ 1 , 2 ]) . validate ([ 1 , 2 , 3 ]) # false","title":"Subset"},{"location":"rules/Subset/#categorization","text":"Arrays","title":"Categorization"},{"location":"rules/Subset/#changelog","text":"Version Description 1.0.0 Created See also: ListType","title":"Changelog"},{"location":"rules/SymbolicLink/","text":"SymbolicLink SymbolicLink() Validates if the given input is a symbolic link. v . symbolicLink () . validate ( '/path/of/valid/symbolic/link' ) # true Categorization File system Changelog Version Description 1.0.0 Created See also: Directory Executable Exists Extension File Image Mimetype Readable Size Writable","title":"SymbolicLink"},{"location":"rules/SymbolicLink/#symboliclink","text":"SymbolicLink() Validates if the given input is a symbolic link. v . symbolicLink () . validate ( '/path/of/valid/symbolic/link' ) # true","title":"SymbolicLink"},{"location":"rules/SymbolicLink/#categorization","text":"File system","title":"Categorization"},{"location":"rules/SymbolicLink/#changelog","text":"Version Description 1.0.0 Created See also: Directory Executable Exists Extension File Image Mimetype Readable Size Writable","title":"Changelog"},{"location":"rules/Time/","text":"Time Time(date_format: str = '%H:%M:%S') Validates if input is a date. The date_format argument should be in accordance to datetime Format Code string. When a date_format is not given its default value is %H:%M:%S . If input is instance of datetime, then it is treated as valid. v . time () . validate ( '00:00:00' ) # true v . time () . validate ( '23:20:59' ) # true v . time ( '%H:%M' ) . validate ( '23:59' ) # true v . time ( '%H%M%S' ) . validate ( 232059 ) # false v . time () . validate ( '24:00:00' ) # false v . time () . validate ( datetime . now ()) # true Categorization Date and Time Changelog Version Description 1.0.0 Created See also: Date DateTime LeapDate LeapYear","title":"Time"},{"location":"rules/Time/#time","text":"Time(date_format: str = '%H:%M:%S') Validates if input is a date. The date_format argument should be in accordance to datetime Format Code string. When a date_format is not given its default value is %H:%M:%S . If input is instance of datetime, then it is treated as valid. v . time () . validate ( '00:00:00' ) # true v . time () . validate ( '23:20:59' ) # true v . time ( '%H:%M' ) . validate ( '23:59' ) # true v . time ( '%H%M%S' ) . validate ( 232059 ) # false v . time () . validate ( '24:00:00' ) # false v . time () . validate ( datetime . now ()) # true","title":"Time"},{"location":"rules/Time/#categorization","text":"Date and Time","title":"Categorization"},{"location":"rules/Time/#changelog","text":"Version Description 1.0.0 Created See also: Date DateTime LeapDate LeapYear","title":"Changelog"},{"location":"rules/Tld/","text":"Tld Tld() Validates whether the input is a top-level domain. v . tld () . validate ( 'ua' ) # true v . tld () . validate ( 'com' ) # true v . tld () . validate ( 'ly' ) # true v . tld () . validate ( 'org' ) # true Categorization Internet Changelog Version Description 1.0.0 Created See also: CountryCode Domain Ip MacAddress","title":"Tld"},{"location":"rules/Tld/#tld","text":"Tld() Validates whether the input is a top-level domain. v . tld () . validate ( 'ua' ) # true v . tld () . validate ( 'com' ) # true v . tld () . validate ( 'ly' ) # true v . tld () . validate ( 'org' ) # true","title":"Tld"},{"location":"rules/Tld/#categorization","text":"Internet","title":"Categorization"},{"location":"rules/Tld/#changelog","text":"Version Description 1.0.0 Created See also: CountryCode Domain Ip MacAddress","title":"Changelog"},{"location":"rules/TrueVal/","text":"TrueVal TrueVal() Validates if a value is considered as True . v . trueVal () . validate ( True ) # true v . trueVal () . validate ( 1 ) # true v . trueVal () . validate ( '1' ) # true v . trueVal () . validate ( 'true' ) # true v . trueVal () . validate ( 'on' ) # true v . trueVal () . validate ( 'yes' ) # true v . trueVal () . validate ( '0.5' ) # false v . trueVal () . validate ( '2' ) # false Categorization Booleans Changelog Version Description 1.0.0 Created See also: BoolType BoolVal FalseVal","title":"TrueVal"},{"location":"rules/TrueVal/#trueval","text":"TrueVal() Validates if a value is considered as True . v . trueVal () . validate ( True ) # true v . trueVal () . validate ( 1 ) # true v . trueVal () . validate ( '1' ) # true v . trueVal () . validate ( 'true' ) # true v . trueVal () . validate ( 'on' ) # true v . trueVal () . validate ( 'yes' ) # true v . trueVal () . validate ( '0.5' ) # false v . trueVal () . validate ( '2' ) # false","title":"TrueVal"},{"location":"rules/TrueVal/#categorization","text":"Booleans","title":"Categorization"},{"location":"rules/TrueVal/#changelog","text":"Version Description 1.0.0 Created See also: BoolType BoolVal FalseVal","title":"Changelog"},{"location":"rules/Type/","text":"Type Type(type_name: str) Validates the type of input. List of available for validation types: list,bool, int, str, float, complex, list, tuple, range, dict, set, frozenset, bytes, bytearray, memoryview function, NoneType def i_am_function (): pass v . type ( 'bool' ) . validate ( True ) # true v . type ( 'str' ) . validate ( 'alex' ) # true v . type ( 'function' ) . validate ( i_am_function ) # true v . type ( 'bytes' ) . validate ( b '' ) # true Categorization Types Changelog Version Description 1.0.0 Created See also: ListType BoolType BoolVal CallableType Finite FloatType FloatVal Infinite Instance IntType IntVal NoneType Number StringType StringVal","title":"Type"},{"location":"rules/Type/#type","text":"Type(type_name: str) Validates the type of input. List of available for validation types: list,bool, int, str, float, complex, list, tuple, range, dict, set, frozenset, bytes, bytearray, memoryview function, NoneType def i_am_function (): pass v . type ( 'bool' ) . validate ( True ) # true v . type ( 'str' ) . validate ( 'alex' ) # true v . type ( 'function' ) . validate ( i_am_function ) # true v . type ( 'bytes' ) . validate ( b '' ) # true","title":"Type"},{"location":"rules/Type/#categorization","text":"Types","title":"Categorization"},{"location":"rules/Type/#changelog","text":"Version Description 1.0.0 Created See also: ListType BoolType BoolVal CallableType Finite FloatType FloatVal Infinite Instance IntType IntVal NoneType Number StringType StringVal","title":"Changelog"},{"location":"rules/Unique/","text":"Unique Unique() Validates whether the input array contains only unique values. v . unique () . validate ([]) # true v . unique () . validate ([ 1 , 2 , 3 ]) # true v . unique () . validate ([ 1 , 2 , 2 , 3 ]) # false v . unique () . validate ([ 1 , 2 , 3 , 1 ]) # false Categorization Arrays Changelog Version Description 1.0.0 Created See also: ListType Contains Each","title":"Unique"},{"location":"rules/Unique/#unique","text":"Unique() Validates whether the input array contains only unique values. v . unique () . validate ([]) # true v . unique () . validate ([ 1 , 2 , 3 ]) # true v . unique () . validate ([ 1 , 2 , 2 , 3 ]) # false v . unique () . validate ([ 1 , 2 , 3 , 1 ]) # false","title":"Unique"},{"location":"rules/Unique/#categorization","text":"Arrays","title":"Categorization"},{"location":"rules/Unique/#changelog","text":"Version Description 1.0.0 Created See also: ListType Contains Each","title":"Changelog"},{"location":"rules/Uppercase/","text":"Uppercase Uppercase() Validates whether the characters in the input are uppercase. v . uppercase () . validate ( 'W3C' ) # true This rule does not validate if the input a numeric value, so 123 and % will be valid. Please add more validations to the chain if you want to refine your validation. v . uppercase () . check ( '42' ) # true v . Not ( v . numericVal ()) . uppercase () . validate ( '42' ) # false v . uppercase () . check ( '#$%!' ) # true v . alnum () . uppercase () . validate ( '#$%!' ) # false v . Not ( v . numericVal ()) . alnum () . uppercase () . validate ( 'W3C' ) # true Categorization Strings Changelog Version Description 1.0.0 Created See also: Alnum Alpha Lowercase NumericVal Roman","title":"Uppercase"},{"location":"rules/Uppercase/#uppercase","text":"Uppercase() Validates whether the characters in the input are uppercase. v . uppercase () . validate ( 'W3C' ) # true This rule does not validate if the input a numeric value, so 123 and % will be valid. Please add more validations to the chain if you want to refine your validation. v . uppercase () . check ( '42' ) # true v . Not ( v . numericVal ()) . uppercase () . validate ( '42' ) # false v . uppercase () . check ( '#$%!' ) # true v . alnum () . uppercase () . validate ( '#$%!' ) # false v . Not ( v . numericVal ()) . alnum () . uppercase () . validate ( 'W3C' ) # true","title":"Uppercase"},{"location":"rules/Uppercase/#categorization","text":"Strings","title":"Categorization"},{"location":"rules/Uppercase/#changelog","text":"Version Description 1.0.0 Created See also: Alnum Alpha Lowercase NumericVal Roman","title":"Changelog"},{"location":"rules/Url/","text":"Url Url(public: bool = False) Validates whether the input is a URL. This rule uses validation from kvesteri/validators . v . url () . validate ( 'http://example.com' ) # true v . url () . validate ( 'http://example.com123' ) # false v . url () . validate ( 'https://www.youtube.com/watch?v=6FOUqQt3Kg0' ) # true v . url () . validate ( 'ftp://ftp.is.co.za.example.org/rfc/rfc1808.txt' ) # true v . url () . validate ( 'http://10.0.0.1' ) # true v . url ( public = True ) . validate ( 'http://10.0.0.1' ) # false Set public as True to only allow a public IP address. Categorization Internet Changelog Version Description 1.0.0 Created See also: Domain Email Phone Slug VideoUrl","title":"Url"},{"location":"rules/Url/#url","text":"Url(public: bool = False) Validates whether the input is a URL. This rule uses validation from kvesteri/validators . v . url () . validate ( 'http://example.com' ) # true v . url () . validate ( 'http://example.com123' ) # false v . url () . validate ( 'https://www.youtube.com/watch?v=6FOUqQt3Kg0' ) # true v . url () . validate ( 'ftp://ftp.is.co.za.example.org/rfc/rfc1808.txt' ) # true v . url () . validate ( 'http://10.0.0.1' ) # true v . url ( public = True ) . validate ( 'http://10.0.0.1' ) # false Set public as True to only allow a public IP address.","title":"Url"},{"location":"rules/Url/#categorization","text":"Internet","title":"Categorization"},{"location":"rules/Url/#changelog","text":"Version Description 1.0.0 Created See also: Domain Email Phone Slug VideoUrl","title":"Changelog"},{"location":"rules/Uuid/","text":"Uuid Uuid(version: Union[Optional[int], Optional[str]] = None)) Validates whether the input is a valid UUID. It also supports validation of specific versions 1, 3, 4 and 5. v . uuid () . validate ( 'Hello World!' ) # false v . uuid () . validate ( 'eb3115e5-bd16-4939-ab12-2b95745a30f3' ) # true v . uuid ( 1 ) . validate ( 'eb3115e5-bd16-4939-ab12-2b95745a30f3' ) # false v . uuid ( 4 ) . validate ( 'eb3115e5-bd16-4939-ab12-2b95745a30f3' ) # true Categorization Strings Changelog Version Description 1.0.0 Created See also: BaseNum Decimal Digit","title":"Uuid"},{"location":"rules/Uuid/#uuid","text":"Uuid(version: Union[Optional[int], Optional[str]] = None)) Validates whether the input is a valid UUID. It also supports validation of specific versions 1, 3, 4 and 5. v . uuid () . validate ( 'Hello World!' ) # false v . uuid () . validate ( 'eb3115e5-bd16-4939-ab12-2b95745a30f3' ) # true v . uuid ( 1 ) . validate ( 'eb3115e5-bd16-4939-ab12-2b95745a30f3' ) # false v . uuid ( 4 ) . validate ( 'eb3115e5-bd16-4939-ab12-2b95745a30f3' ) # true","title":"Uuid"},{"location":"rules/Uuid/#categorization","text":"Strings","title":"Categorization"},{"location":"rules/Uuid/#changelog","text":"Version Description 1.0.0 Created See also: BaseNum Decimal Digit","title":"Changelog"},{"location":"rules/Version/","text":"Version Version() Validates version numbers using Semantic Versioning. v . version () . validate ( '1.0.0' ) # true Categorization Strings Changelog Version Description 1.0.0 Created See also: Equals Regex Roman","title":"Version"},{"location":"rules/Version/#version","text":"Version() Validates version numbers using Semantic Versioning. v . version () . validate ( '1.0.0' ) # true","title":"Version"},{"location":"rules/Version/#categorization","text":"Strings","title":"Categorization"},{"location":"rules/Version/#changelog","text":"Version Description 1.0.0 Created See also: Equals Regex Roman","title":"Changelog"},{"location":"rules/VideoUrl/","text":"VideoUrl VideoUrl(service: Optional[str] = None) Validates if the input is a video URL value. v . videoUrl () . validate ( 'https://player.vimeo.com/video/71787467' ) # true v . videoUrl () . validate ( 'https://vimeo.com/71787467' ) # true v . videoUrl () . validate ( 'https://www.youtube.com/embed/netHLn9TScY' ) # true v . videoUrl () . validate ( 'https://www.youtube.com/watch?v=netHLn9TScY' ) # true v . videoUrl () . validate ( 'https://youtu.be/netHLn9TScY' ) # true v . videoUrl () . validate ( 'https://www.twitch.tv/videos/320689092' ) # true v . videoUrl () . validate ( 'https://clips.twitch.tv/BitterLazyMangetoutHumbleLife' ) # true v . videoUrl ( 'youtube' ) . validate ( 'https://www.youtube.com/watch?v=netHLn9TScY' ) # true v . videoUrl ( 'vimeo' ) . validate ( 'https://vimeo.com/71787467' ) # true v . videoUrl ( 'twitch' ) . validate ( 'https://www.twitch.tv/videos/320689092' ) # true v . videoUrl ( 'twitch' ) . validate ( 'https://clips.twitch.tv/BitterLazyMangetoutHumbleLife' ) # true v . videoUrl () . validate ( 'https://youtube.com' ) # false v . videoUrl ( 'youtube' ) . validate ( 'https://vimeo.com/71787467' ) # false v . videoUrl ( 'twitch' ) . validate ( 'https://clips.twitch.tv/videos/90210' ) # false v . videoUrl ( 'twitch' ) . validate ( 'https://twitch.tv/TakeTeaAndNoTea' ) # false The services accepted are: YouTube Vimeo Twitch (videos and clips) The service value is not case-sensitive. Message template for this validator includes {service} . Categorization Internet Changelog Version Description 1.0.0 Created See also: Email Json Phone Slug Url","title":"VideoUrl"},{"location":"rules/VideoUrl/#videourl","text":"VideoUrl(service: Optional[str] = None) Validates if the input is a video URL value. v . videoUrl () . validate ( 'https://player.vimeo.com/video/71787467' ) # true v . videoUrl () . validate ( 'https://vimeo.com/71787467' ) # true v . videoUrl () . validate ( 'https://www.youtube.com/embed/netHLn9TScY' ) # true v . videoUrl () . validate ( 'https://www.youtube.com/watch?v=netHLn9TScY' ) # true v . videoUrl () . validate ( 'https://youtu.be/netHLn9TScY' ) # true v . videoUrl () . validate ( 'https://www.twitch.tv/videos/320689092' ) # true v . videoUrl () . validate ( 'https://clips.twitch.tv/BitterLazyMangetoutHumbleLife' ) # true v . videoUrl ( 'youtube' ) . validate ( 'https://www.youtube.com/watch?v=netHLn9TScY' ) # true v . videoUrl ( 'vimeo' ) . validate ( 'https://vimeo.com/71787467' ) # true v . videoUrl ( 'twitch' ) . validate ( 'https://www.twitch.tv/videos/320689092' ) # true v . videoUrl ( 'twitch' ) . validate ( 'https://clips.twitch.tv/BitterLazyMangetoutHumbleLife' ) # true v . videoUrl () . validate ( 'https://youtube.com' ) # false v . videoUrl ( 'youtube' ) . validate ( 'https://vimeo.com/71787467' ) # false v . videoUrl ( 'twitch' ) . validate ( 'https://clips.twitch.tv/videos/90210' ) # false v . videoUrl ( 'twitch' ) . validate ( 'https://twitch.tv/TakeTeaAndNoTea' ) # false The services accepted are: YouTube Vimeo Twitch (videos and clips) The service value is not case-sensitive. Message template for this validator includes {service} .","title":"VideoUrl"},{"location":"rules/VideoUrl/#categorization","text":"Internet","title":"Categorization"},{"location":"rules/VideoUrl/#changelog","text":"Version Description 1.0.0 Created See also: Email Json Phone Slug Url","title":"Changelog"},{"location":"rules/Vowel/","text":"Vowel Vowel(*additional_chars: str) Validates whether the input contains only vowels. v . vowel () . validate ( 'aei' ) # true Categorization Strings Changelog Version Description 1.0.0 Created See also: Alnum Alpha Consonant Decimal Digit","title":"Vowel"},{"location":"rules/Vowel/#vowel","text":"Vowel(*additional_chars: str) Validates whether the input contains only vowels. v . vowel () . validate ( 'aei' ) # true","title":"Vowel"},{"location":"rules/Vowel/#categorization","text":"Strings","title":"Categorization"},{"location":"rules/Vowel/#changelog","text":"Version Description 1.0.0 Created See also: Alnum Alpha Consonant Decimal Digit","title":"Changelog"},{"location":"rules/When/","text":"When When(if_rule: AbstractRule, then_rule: AbstractRule, else_rule: Optional[AbstractRule] = None) A ternary validator that accepts three parameters. When the if_rule validates, returns validation for then_rule . When the if_rule doesn't validate, returns validation for else_rule , if defined. v . when ( v . intVal (), v . positive (), v . notEmpty ()) . validate ( 1 ) # true v . when ( v . intVal (), v . positive (), v . notEmpty ()) . validate ( 'not empty' ) # true v . when ( v . intVal (), v . positive (), v . notEmpty ()) . validate ( - 1 ) # false v . when ( v . intVal (), v . positive (), v . notEmpty ()) . validate ( '' ) # false In the sample above, if input_value is an integer, then it must be positive. If input_value is not an integer, then it must not be empty. When else_rule is not defined use AlwaysInvalid Categorization Conditions Nesting Changelog Version Description 1.0.0 Created See also: AllOf AlwaysInvalid AnyOf NoneOf OneOf","title":"When"},{"location":"rules/When/#when","text":"When(if_rule: AbstractRule, then_rule: AbstractRule, else_rule: Optional[AbstractRule] = None) A ternary validator that accepts three parameters. When the if_rule validates, returns validation for then_rule . When the if_rule doesn't validate, returns validation for else_rule , if defined. v . when ( v . intVal (), v . positive (), v . notEmpty ()) . validate ( 1 ) # true v . when ( v . intVal (), v . positive (), v . notEmpty ()) . validate ( 'not empty' ) # true v . when ( v . intVal (), v . positive (), v . notEmpty ()) . validate ( - 1 ) # false v . when ( v . intVal (), v . positive (), v . notEmpty ()) . validate ( '' ) # false In the sample above, if input_value is an integer, then it must be positive. If input_value is not an integer, then it must not be empty. When else_rule is not defined use AlwaysInvalid","title":"When"},{"location":"rules/When/#categorization","text":"Conditions Nesting","title":"Categorization"},{"location":"rules/When/#changelog","text":"Version Description 1.0.0 Created See also: AllOf AlwaysInvalid AnyOf NoneOf OneOf","title":"Changelog"},{"location":"rules/Writable/","text":"Writable Writable() Validates if the given input is writable file. v . writable () . validate ( __file__ ) # true Categorization File system Changelog Version Description 1.0.0 Created See also: Directory Executable Exists Extension File Image Mimetype Readable Size SymbolicLink","title":"Writable"},{"location":"rules/Writable/#writable","text":"Writable() Validates if the given input is writable file. v . writable () . validate ( __file__ ) # true","title":"Writable"},{"location":"rules/Writable/#categorization","text":"File system","title":"Categorization"},{"location":"rules/Writable/#changelog","text":"Version Description 1.0.0 Created See also: Directory Executable Exists Extension File Image Mimetype Readable Size SymbolicLink","title":"Changelog"},{"location":"rules/Yes/","text":"Yes Yes() Validates if the input considered as \"Yes\". v . yes () . validate ( 'Y' ) # true v . yes () . validate ( 'Yea' ) # true v . yes () . validate ( 'Yeah' ) # true v . yes () . validate ( 'Yep' ) # true v . yes () . validate ( 'Yes' ) # true This rule is case-insensitive. Categorization Booleans Changelog Version Description 1.0.0 Created See also: BoolType BoolVal No","title":"Yes"},{"location":"rules/Yes/#yes","text":"Yes() Validates if the input considered as \"Yes\". v . yes () . validate ( 'Y' ) # true v . yes () . validate ( 'Yea' ) # true v . yes () . validate ( 'Yeah' ) # true v . yes () . validate ( 'Yep' ) # true v . yes () . validate ( 'Yes' ) # true This rule is case-insensitive.","title":"Yes"},{"location":"rules/Yes/#categorization","text":"Booleans","title":"Categorization"},{"location":"rules/Yes/#changelog","text":"Version Description 1.0.0 Created See also: BoolType BoolVal No","title":"Changelog"}]}